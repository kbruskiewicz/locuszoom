/*! Locuszoom 0.13.0-beta.2 */
var LzWidgetAddons =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./esm/ext/lz-widget-addons.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./esm/ext/lz-widget-addons.js":
/*!*************************************!*\
  !*** ./esm/ext/lz-widget-addons.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _helpers_layouts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/layouts */ "./esm/helpers/layouts.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Optional LocusZoom extension: must be included separately, and after LocusZoom has been loaded
 *
 * This contains (reusable) code to power some (rarely used) demo features:
 *  - The "covariates model" demo, in which an LZ toolbar widget is populated
 *    with information by selecting points on the plot (see "covariates model" demo)
 *  - The "data layers" button, which allows fine control over multiple data layers shown in the same panel
 *    (show/hide, fade, change order, etc). This is powerful, but rarely used because showing many datasets in a small
 *    space is hard to read. (see "multiple phenotypes layered" demo)
 * @module
 */
 // In order to work in a UMD context, this module imports the top-level LocusZoom symbol

var STATUS_VERBS = ['highlight', 'select', 'fade', 'hide'];
var STATUS_ADJECTIVES = ['highlighted', 'selected', 'faded', 'hidden'];
var STATUS_ANTIVERBS = ['unhighlight', 'deselect', 'unfade', 'show']; // LocusZoom plugins work by exporting a function that receives the `LocusZoom` object
// This allows them to work in many contexts (including script tags and ES6 imports)

function install(LocusZoom) {
  var _Button = LocusZoom.Widgets.get('_Button');

  var _BaseWidget = LocusZoom.Widgets.get('BaseWidget');
  /**
   * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate
   *   objects and store them in the special `model.covariates` field of plot `state`.
   * @param {object} layout
   * @param {string} layout.button_html The HTML to render inside the button
   * @param {string} layout.button_title Text to display as a tooltip when hovering over the button
   */


  var CovariatesModel = /*#__PURE__*/function (_BaseWidget2) {
    _inherits(CovariatesModel, _BaseWidget2);

    var _super = _createSuper(CovariatesModel);

    function CovariatesModel() {
      _classCallCheck(this, CovariatesModel);

      return _super.apply(this, arguments);
    }

    _createClass(CovariatesModel, [{
      key: "initialize",
      value: function initialize() {
        var _this = this;

        // Initialize state.model.covariates
        this.parent_plot.state.model = this.parent_plot.state.model || {};
        this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || []; // Create an object at the plot level for easy access to interface methods in custom client-side JS

        /**
         * When a covariates model toolbar element is present, create (one) object at the plot level that exposes
         *   widget data and state for custom interactions with other plot elements.
         * @class CovariatesModel
         */

        this.parent_plot.CovariatesModel = {
          /** @member {Button} */
          button: this,

          /**
           * Add an element to the model and show a representation of it in the toolbar widget menu. If the
           *   element is already part of the model, do nothing (to avoid adding duplicates).
           * When plot state is changed, this will automatically trigger requests for new data accordingly.
           * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()
           *   to create a serialized representation of itself.
           */
          add: function add(element_reference) {
            var plot = _this.parent_plot;
            var element = Object(_helpers_layouts__WEBPACK_IMPORTED_MODULE_0__["deepCopy"])(element_reference);

            if (_typeof(element_reference) == 'object' && typeof element.html != 'string') {
              element.html = typeof element_reference.toHTML == 'function' ? element_reference.toHTML() : element_reference.toString();
            } // Check if the element is already in the model covariates array and return if it is.


            for (var i = 0; i < plot.state.model.covariates.length; i++) {
              if (JSON.stringify(plot.state.model.covariates[i]) === JSON.stringify(element)) {
                return plot;
              }
            }

            plot.state.model.covariates.push(element);
            plot.applyState();
            plot.CovariatesModel.updateWidget();
            return plot;
          },

          /**
           * Remove an element from `state.model.covariates` (and from the toolbar widget menu's
           *  representation of the state model). When plot state is changed, this will automatically trigger
           *  requests for new data accordingly.
           * @param {number} idx Array index of the element, in the `state.model.covariates array`.
           */
          removeByIdx: function removeByIdx(idx) {
            var plot = _this.parent_plot;

            if (typeof plot.state.model.covariates[idx] == 'undefined') {
              throw new Error("Unable to remove model covariate, invalid index: ".concat(idx.toString()));
            }

            plot.state.model.covariates.splice(idx, 1);
            plot.applyState();
            plot.CovariatesModel.updateWidget();
            return plot;
          },

          /**
           * Empty the `state.model.covariates` array (and toolbar widget menu representation thereof) of all
           *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly
           */
          removeAll: function removeAll() {
            var plot = _this.parent_plot;
            plot.state.model.covariates = [];
            plot.applyState();
            plot.CovariatesModel.updateWidget();
            return plot;
          },

          /**
           * Manually trigger the update methods on the toolbar widget's button and menu elements to force
           *   display of most up-to-date content. Can be used to force the toolbar to reflect changes made, eg if
           *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`
           */
          updateWidget: function updateWidget() {
            _this.button.update();

            _this.button.menu.update();
          }
        };
      }
    }, {
      key: "update",
      value: function update() {
        var _this2 = this;

        if (this.button) {
          return this;
        }

        this.button = new _Button(this).setColor(this.layout.color).setHtml(this.layout.button_html).setTitle(this.layout.button_title).setOnclick(function () {
          _this2.button.menu.populate();
        });
        this.button.menu.setPopulate(function () {
          var selector = _this2.button.menu.inner_selector;
          selector.html(''); // General model HTML representation

          if (typeof _this2.parent_plot.state.model.html != 'undefined') {
            selector.append('div').html(_this2.parent_plot.state.model.html);
          } // Model covariates table


          if (!_this2.parent_plot.state.model.covariates.length) {
            selector.append('i').html('no covariates in model');
          } else {
            selector.append('h5').html("Model Covariates (".concat(_this2.parent_plot.state.model.covariates.length, ")"));
            var table = selector.append('table');

            _this2.parent_plot.state.model.covariates.forEach(function (covariate, idx) {
              var html = _typeof(covariate) == 'object' && typeof covariate.html == 'string' ? covariate.html : covariate.toString();
              var row = table.append('tr');
              row.append('td').append('button').attr('class', "lz-toolbar-button lz-toolbar-button-".concat(_this2.layout.color)).style('margin-left', '0em').on('click', function () {
                return _this2.parent_plot.CovariatesModel.removeByIdx(idx);
              }).html('×');
              row.append('td').html(html);
            });

            selector.append('button').attr('class', "lz-toolbar-button lz-toolbar-button-".concat(_this2.layout.color)).style('margin-left', '4px').html('× Remove All Covariates').on('click', function () {
              return _this2.parent_plot.CovariatesModel.removeAll();
            });
          }
        });

        this.button.preUpdate = function () {
          var html = 'Model';
          var count = _this2.parent_plot.state.model.covariates.length;

          if (count) {
            var noun = count > 1 ? 'covariates' : 'covariate';
            html += " (".concat(count, " ").concat(noun, ")");
          }

          _this2.button.setHtml(html).disable(false);
        };

        this.button.show();
        return this;
      }
    }]);

    return CovariatesModel;
  }(_BaseWidget);
  /**
   * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.
   */


  var DataLayersWidget = /*#__PURE__*/function (_BaseWidget3) {
    _inherits(DataLayersWidget, _BaseWidget3);

    var _super2 = _createSuper(DataLayersWidget);

    function DataLayersWidget() {
      _classCallCheck(this, DataLayersWidget);

      return _super2.apply(this, arguments);
    }

    _createClass(DataLayersWidget, [{
      key: "update",
      value: function update() {
        var _this3 = this;

        if (typeof this.layout.button_html != 'string') {
          this.layout.button_html = 'Data Layers';
        }

        if (typeof this.layout.button_title != 'string') {
          this.layout.button_title = 'Manipulate Data Layers (sort, dim, show/hide, etc.)';
        }

        if (this.button) {
          return this;
        }

        this.button = new _Button(this).setColor(this.layout.color).setHtml(this.layout.button_html).setTitle(this.layout.button_title).setOnclick(function () {
          _this3.button.menu.populate();
        });
        this.button.menu.setPopulate(function () {
          _this3.button.menu.inner_selector.html('');

          var table = _this3.button.menu.inner_selector.append('table');

          _this3.parent_panel.data_layer_ids_by_z_index.slice().reverse().forEach(function (id, idx) {
            var data_layer = _this3.parent_panel.data_layers[id];
            var name = typeof data_layer.layout.name != 'string' ? data_layer.id : data_layer.layout.name;
            var row = table.append('tr'); // Layer name

            row.append('td').html(name); // Status toggle buttons

            _this3.layout.statuses.forEach(function (status_adj) {
              var status_idx = STATUS_ADJECTIVES.indexOf(status_adj);
              var status_verb = STATUS_VERBS[status_idx];
              var html, onclick, highlight;

              if (data_layer.global_statuses[status_adj]) {
                html = STATUS_ANTIVERBS[status_idx];
                onclick = "un".concat(status_verb, "AllElements");
                highlight = '-highlighted';
              } else {
                html = STATUS_VERBS[status_idx];
                onclick = "".concat(status_verb, "AllElements");
                highlight = '';
              }

              row.append('td').append('a').attr('class', "lz-toolbar-button lz-toolbar-button-".concat(_this3.layout.color).concat(highlight)).style('margin-left', '0em').on('click', function () {
                data_layer[onclick]();

                _this3.button.menu.populate();
              }).html(html);
            }); // Sort layer buttons


            var at_top = idx === 0;
            var at_bottom = idx === _this3.parent_panel.data_layer_ids_by_z_index.length - 1;
            var td = row.append('td');
            td.append('a').attr('class', "lz-toolbar-button lz-toolbar-button-group-start lz-toolbar-button-".concat(_this3.layout.color).concat(at_bottom ? '-disabled' : '')).style('margin-left', '0em').on('click', function () {
              data_layer.moveBack();

              _this3.button.menu.populate();
            }).html('▾').attr('title', 'Move layer down (further back)');
            td.append('a').attr('class', "lz-toolbar-button lz-toolbar-button-group-middle lz-toolbar-button-".concat(_this3.layout.color).concat(at_top ? '-disabled' : '')).style('margin-left', '0em').on('click', function () {
              data_layer.moveForward();

              _this3.button.menu.populate();
            }).html('▴').attr('title', 'Move layer up (further front)');
            td.append('a').attr('class', 'lz-toolbar-button lz-toolbar-button-group-end lz-toolbar-button-red').style('margin-left', '0em').on('click', function () {
              if (confirm("Are you sure you want to remove the ".concat(name, " layer? This cannot be undone."))) {
                data_layer.parent.removeDataLayer(id);
              }

              return _this3.button.menu.populate();
            }).html('×').attr('title', 'Remove layer');
          });

          return _this3;
        });
        this.button.show();
        return this;
      }
    }]);

    return DataLayersWidget;
  }(_BaseWidget);

  var covariates_model_tooltip = function () {
    var covariates_model_association = LocusZoom.Layouts.get('tooltip', 'standard_association', {
      unnamespaced: true
    });
    covariates_model_association.html += '<a href="javascript:void(0);" onclick="LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));">Condition on Variant</a><br>';
    return covariates_model_association;
  }();

  var covariates_model_plot = function () {
    var covariates_model_plot_toolbar = LocusZoom.Layouts.get('toolbar', 'standard_association', {
      unnamespaced: true
    });
    covariates_model_plot_toolbar.widgets.push({
      type: 'covariates_model',
      button_html: 'Model',
      button_title: 'Show and edit covariates currently in model',
      position: 'left'
    });
    return covariates_model_plot_toolbar;
  }();

  LocusZoom.Widgets.add('covariates_model', CovariatesModel);
  LocusZoom.Widgets.add('data_layers', DataLayersWidget);
  LocusZoom.Layouts.add('tooltip', 'covariates_model_association', covariates_model_tooltip);
  LocusZoom.Layouts.add('toolbar', 'covariates_model_plot', covariates_model_plot);
}

if (typeof LocusZoom !== 'undefined') {
  // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()
  // eslint-disable-next-line no-undef
  LocusZoom.use(install);
}

/* harmony default export */ __webpack_exports__["default"] = (install);

/***/ }),

/***/ "./esm/helpers/layouts.js":
/*!********************************!*\
  !*** ./esm/helpers/layouts.js ***!
  \********************************/
/*! exports provided: applyNamespaces, deepCopy, merge, nameToSymbol */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyNamespaces", function() { return applyNamespaces; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deepCopy", function() { return deepCopy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return merge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nameToSymbol", function() { return nameToSymbol; });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "d3");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Utilities for modifying or working with layout objects
 *  @module
 */

var sqrt3 = Math.sqrt(3); // D3 v5 does not provide a triangle down symbol shape, but it is very useful for showing direction of effect.
//  Modified from https://github.com/d3/d3-shape/blob/master/src/symbol/triangle.js

var triangledown = {
  draw: function draw(context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, -y * 2);
    context.lineTo(-sqrt3 * y, y);
    context.lineTo(sqrt3 * y, y);
    context.closePath();
  }
};
/**
 * Apply namespaces to layout, recursively
 * @private
  */

function applyNamespaces(element, namespace, default_namespace) {
  if (namespace) {
    if (typeof namespace == 'string') {
      namespace = {
        "default": namespace
      };
    }
  } else {
    namespace = {
      "default": ''
    };
  }

  if (typeof element == 'string') {
    var re = /\{\{namespace(\[[A-Za-z_0-9]+\]|)\}\}/g;
    var match, base, key, resolved_namespace;
    var replace = [];

    while ((match = re.exec(element)) !== null) {
      base = match[0];
      key = match[1].length ? match[1].replace(/(\[|\])/g, '') : null;
      resolved_namespace = default_namespace;

      if (namespace != null && _typeof(namespace) == 'object' && typeof namespace[key] != 'undefined') {
        resolved_namespace = namespace[key] + (namespace[key].length ? ':' : '');
      }

      replace.push({
        base: base,
        namespace: resolved_namespace
      });
    }

    for (var r in replace) {
      element = element.replace(replace[r].base, replace[r].namespace);
    }
  } else if (_typeof(element) == 'object' && element != null) {
    if (typeof element.namespace != 'undefined') {
      var merge_namespace = typeof element.namespace == 'string' ? {
        "default": element.namespace
      } : element.namespace;
      namespace = merge(namespace, merge_namespace);
    }

    var namespaced_element, namespaced_property;

    for (var property in element) {
      if (property === 'namespace') {
        continue;
      }

      namespaced_element = applyNamespaces(element[property], namespace, default_namespace);
      namespaced_property = applyNamespaces(property, namespace, default_namespace);

      if (property !== namespaced_property) {
        delete element[property];
      }

      element[namespaced_property] = namespaced_element;
    }
  }

  return element;
}
/**
 * A helper method used for merging two objects. If a key is present in both, takes the value from the first object
 *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.
 *
 * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.
 *
 * @param {object} custom_layout An object containing configuration parameters that override or add to defaults
 * @param {object} default_layout An object containing default settings.
 * @returns {object} The custom layout is modified in place and also returned from this method.
 */


function merge(custom_layout, default_layout) {
  if (_typeof(custom_layout) !== 'object' || _typeof(default_layout) !== 'object') {
    throw new Error("LocusZoom.Layouts.merge only accepts two layout objects; ".concat(_typeof(custom_layout), ", ").concat(_typeof(default_layout), " given"));
  }

  for (var property in default_layout) {
    if (!Object.prototype.hasOwnProperty.call(default_layout, property)) {
      continue;
    } // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.
    // (javascript treats nulls as "object" when we just want to overwrite them as if they're undefined)
    // Also separate arrays from objects as a discrete type.


    var custom_type = custom_layout[property] === null ? 'undefined' : _typeof(custom_layout[property]);

    var default_type = _typeof(default_layout[property]);

    if (custom_type === 'object' && Array.isArray(custom_layout[property])) {
      custom_type = 'array';
    }

    if (default_type === 'object' && Array.isArray(default_layout[property])) {
      default_type = 'array';
    } // Unsupported property types: throw an exception


    if (custom_type === 'function' || default_type === 'function') {
      throw new Error('LocusZoom.Layouts.merge encountered an unsupported property type');
    } // Undefined custom value: pull the default value


    if (custom_type === 'undefined') {
      custom_layout[property] = deepCopy(default_layout[property]);
      continue;
    } // Both values are objects: merge recursively


    if (custom_type === 'object' && default_type === 'object') {
      custom_layout[property] = merge(custom_layout[property], default_layout[property]);
      continue;
    }
  }

  return custom_layout;
}

function deepCopy(item) {
  return JSON.parse(JSON.stringify(item));
}
/**
 * Convert name to symbol
 * Layout objects accept symbol names as strings (circle, triangle, etc). Convert to symbol objects.
 * @return {object|null} An object that implements a draw method (eg d3-shape symbols or extra LZ items)
 */


function nameToSymbol(shape) {
  if (!shape) {
    return null;
  }

  if (shape === 'triangledown') {
    // D3 does not provide this symbol natively
    return triangledown;
  } // Legend shape names are strings; need to connect this to factory. Eg circle --> d3.symbolCircle


  var factory_name = "symbol".concat(shape.charAt(0).toUpperCase() + shape.slice(1));
  return d3__WEBPACK_IMPORTED_MODULE_0__[factory_name] || null;
}



/***/ }),

/***/ "d3":
/*!*********************!*\
  !*** external "d3" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = d3;

/***/ })

/******/ })["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,