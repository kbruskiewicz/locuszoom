/*! Locuszoom 0.13.0-beta.2 */
var LzIntervalsTrack =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./esm/ext/lz-intervals-track.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./esm/ext/lz-intervals-track.js":
/*!***************************************!*\
  !*** ./esm/ext/lz-intervals-track.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "d3");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
Interval annotation track (for chromatin state, etc). Useful for BED file data with non-overlapping intervals.
This is not part of the core LocusZoom library, but can be included as a standalone file.

The page must incorporate and load all libraries before this file can be used, including:
 - Vendor assets
 - LocusZoom
 @module
*/


function install(LocusZoom) {
  var BaseApiAdapter = LocusZoom.Adapters.get('BaseApiAdapter');

  var _Button = LocusZoom.Widgets.get('_Button');

  var _BaseWidget = LocusZoom.Widgets.get('BaseWidget');
  /**
   * Data Source for Interval Annotation Data (e.g. BED Tracks), as fetched from the LocusZoom API server (or compatible)
   * @public
   */


  var IntervalLZ = /*#__PURE__*/function (_BaseApiAdapter) {
    _inherits(IntervalLZ, _BaseApiAdapter);

    var _super = _createSuper(IntervalLZ);

    function IntervalLZ() {
      _classCallCheck(this, IntervalLZ);

      return _super.apply(this, arguments);
    }

    _createClass(IntervalLZ, [{
      key: "getURL",
      value: function getURL(state, chain, fields) {
        var source = chain.header.bedtracksource || this.params.source;
        var query = "?filter=id in ".concat(source, " and chromosome eq '").concat(state.chr, "' and start le ").concat(state.end, " and end ge ").concat(state.start);
        return "".concat(this.url).concat(query);
      }
    }]);

    return IntervalLZ;
  }(BaseApiAdapter);
  /**
   * Button to toggle split tracks
   */


  var ToggleSplitTracks = /*#__PURE__*/function (_BaseWidget2) {
    _inherits(ToggleSplitTracks, _BaseWidget2);

    var _super2 = _createSuper(ToggleSplitTracks);

    function ToggleSplitTracks(layout) {
      var _this;

      _classCallCheck(this, ToggleSplitTracks);

      _this = _super2.apply(this, arguments);

      if (!layout.data_layer_id) {
        layout.data_layer_id = 'intervals';
      }

      if (!_this.parent_panel.data_layers[layout.data_layer_id]) {
        throw new Error('Toggle split tracks widget specifies an invalid data layer ID');
      }

      return _this;
    }

    _createClass(ToggleSplitTracks, [{
      key: "update",
      value: function update() {
        var _this2 = this;

        var data_layer = this.parent_panel.data_layers[this.layout.data_layer_id];
        var html = data_layer.layout.split_tracks ? 'Merge Tracks' : 'Split Tracks';

        if (this.button) {
          this.button.setHtml(html);
          this.button.show();
          this.parent.position();
          return this;
        } else {
          this.button = new _Button(this).setColor(this.layout.color).setHtml(html).setTitle('Toggle whether tracks are split apart or merged together').setOnclick(function () {
            data_layer.toggleSplitTracks();

            if (_this2.scale_timeout) {
              clearTimeout(_this2.scale_timeout);
            }

            _this2.scale_timeout = setTimeout(function () {
              // NOTE: This can override changes made in toggleSplitTracks
              _this2.parent_panel.scaleHeightToData(); // DEFECT


              _this2.parent_plot.positionPanels();
            }, 0);

            _this2.update();
          });
          return this.update();
        }
      }
    }]);

    return ToggleSplitTracks;
  }(_BaseWidget);
  /**
   * Convert a value ""rr,gg,bb" (if given) to a css-friendly color string: "rgb(rr,gg,bb)".
   * This is tailored specifically to the color specification format embraced by the BED file standard.
   * @function to_rgb
   * @param {Object} parameters This function has no defined configuration options
   * @param {String|null} value The value to convert to rgb
   */


  function to_rgb(parameters, value) {
    return value ? "rgb(".concat(value, ")") : null;
  }

  var default_layout = {
    start_field: 'start',
    end_field: 'end',
    track_label_field: 'state_name',
    // Used to label items on the y-axis
    // Used to uniquely identify tracks for coloring. This tends to lead to more stable coloring/sorting
    //  than using the label field- eg, state_ids allow us to set global colors across the entire dataset,
    //  not just choose unique colors within a particular narrow region. (where changing region might lead to more
    //  categories and different colors)
    track_split_field: 'state_id',
    track_split_order: 'DESC',
    track_split_legend_to_y_axis: 2,
    split_tracks: true,
    track_height: 15,
    track_vertical_spacing: 3,
    bounding_box_padding: 2,
    always_hide_legend: false,
    color: '#B8B8B8',
    fill_opacity: 1,
    tooltip_positioning: 'vertical'
  };
  /**
   * Intervals Data Layer
   * Implements a data layer that will render interval annotation tracks (intervals must provide start and end values)
   */

  var BaseLayer = LocusZoom.DataLayers.get('BaseDataLayer');

  var LzIntervalsTrack = /*#__PURE__*/function (_BaseLayer) {
    _inherits(LzIntervalsTrack, _BaseLayer);

    var _super3 = _createSuper(LzIntervalsTrack);

    function LzIntervalsTrack(layout) {
      var _this3;

      _classCallCheck(this, LzIntervalsTrack);

      LocusZoom.Layouts.merge(layout, default_layout);
      _this3 = _super3.apply(this, arguments);
      _this3.tracks = 1;
      _this3.previous_tracks = 1; // track-number-indexed object with arrays of interval indexes in the dataset

      _this3.interval_track_index = {
        1: []
      };
      return _this3;
    }
    /**
     * To define shared highlighting on the track split field define the status node id override
     * to generate an ID common to the track when we're actively splitting data out to separate tracks
     * @override
     * @returns {String}
     */


    _createClass(LzIntervalsTrack, [{
      key: "getElementStatusNodeId",
      value: function getElementStatusNodeId(element) {
        if (this.layout.split_tracks) {
          return "".concat(this.getBaseId(), "-statusnode-").concat(element[this.layout.track_split_field]).replace(/[^\w]/g, '_');
        }

        return "".concat(this.getElementId(element), "-statusnode");
      } // Helper function to sum layout values to derive total height for a single interval track

    }, {
      key: "getTrackHeight",
      value: function getTrackHeight() {
        return this.layout.track_height + this.layout.track_vertical_spacing + 2 * this.layout.bounding_box_padding;
      } // Modify the layout as necessary to ensure that appropriate color, label, and legend options are available
      // Even when not displayed, the legend is used to generate the y-axis ticks

    }, {
      key: "_applyLayoutOptions",
      value: function _applyLayoutOptions() {
        var self = this;
        var base_layout = this._base_layout;
        var render_layout = this.layout;
        var base_color_scale = base_layout.color.find(function (item) {
          return item.scale_function && item.scale_function === 'categorical_bin';
        });
        var color_scale = render_layout.color.find(function (item) {
          return item.scale_function && item.scale_function === 'categorical_bin';
        });

        if (!base_color_scale) {
          // This can be a placeholder (empty categories & values), but it needs to be there
          throw new Error('Interval tracks must define a `categorical_bin` color scale');
        }

        var has_colors = base_color_scale.parameters.categories.length && base_color_scale.parameters.values.length;
        var has_legend = base_layout.legend && base_layout.legend.length;

        if (!!has_colors ^ !!has_legend) {
          // Don't allow color OR legend to be set manually. It must be both, or neither.
          throw new Error('To use a manually specified color scheme, both color and legend options must be set.');
        } // Harvest any information about an explicit color field that should be considered when generating colors


        var rgb_option = base_layout.color.find(function (item) {
          return item.scale_function && item.scale_function === 'to_rgb';
        });
        var rgb_field = rgb_option && rgb_option.field; // Auto-generate legend based on data

        var known_categories = this._generateCategoriesFromData(this.data, rgb_field); // [id, label, itemRgb] items


        if (!has_colors && !has_legend) {
          // If no color scheme pre-defined, then make a color scheme that is appropriate and apply to the plot
          // The legend must match the color scheme. If we generate one, then we must generate both.
          var colors = this._makeColorScheme(known_categories);

          color_scale.parameters.categories = known_categories.map(function (item) {
            return item[0];
          });
          color_scale.parameters.values = colors;
          this.layout.legend = known_categories.map(function (pair, index) {
            var id = pair[0];
            var label = pair[1];
            var item_color = color_scale.parameters.values[index];
            var item = {
              shape: 'rect',
              width: 9,
              label: label,
              color: item_color
            };
            item[self.layout.track_split_field] = id;
            return item;
          });
        }
      } // After we've loaded interval data interpret it to assign
      // each to a track so that they do not overlap in the view

    }, {
      key: "assignTracks",
      value: function assignTracks() {
        var _this4 = this;

        // Autogenerate layout options if not provided
        this._applyLayoutOptions(); // Reinitialize some metadata


        this.previous_tracks = this.tracks;
        this.tracks = 0;
        this.interval_track_index = {
          1: []
        }; // This maps unique values of track_split_field to unique y indices. It controls the ordering of separate tracks.

        this.track_split_field_index = {}; // If splitting tracks by a field's value then determine how to order them. There are two options here:
        // a) numeric IDs get sorted in numeric order (JS quirk: int object keys act like array indices), or
        // b) text labels get sorted based on order in the source data (hash preserves insertion order)

        if (this.layout.track_split_field && this.layout.split_tracks) {
          this.data.forEach(function (d) {
            _this4.track_split_field_index[d[_this4.layout.track_split_field]] = null;
          });
          var index = Object.keys(this.track_split_field_index);

          if (this.layout.track_split_order === 'DESC') {
            index.reverse();
          }

          index.forEach(function (val) {
            _this4.track_split_field_index[val] = _this4.tracks + 1;
            _this4.interval_track_index[_this4.tracks + 1] = [];
            _this4.tracks++;
          });
        }

        this.data.forEach(function (d, i) {
          var _this5 = this;

          // Stash a parent reference on the interval
          this.data[i].parent = this; // Determine display range start and end, based on minimum allowable interval display width,
          // bounded by what we can see (range: values in terms of pixels on the screen)

          this.data[i].display_range = {
            start: this.parent.x_scale(Math.max(d[this.layout.start_field], this.state.start)),
            end: this.parent.x_scale(Math.min(d[this.layout.end_field], this.state.end))
          };
          this.data[i].display_range.width = this.data[i].display_range.end - this.data[i].display_range.start; // Convert and stash display range values into domain values
          // (domain: values in terms of the data set, e.g. megabases)

          this.data[i].display_domain = {
            start: this.parent.x_scale.invert(this.data[i].display_range.start),
            end: this.parent.x_scale.invert(this.data[i].display_range.end)
          };
          this.data[i].display_domain.width = this.data[i].display_domain.end - this.data[i].display_domain.start; // If splitting to tracks based on the value of the designated track split field
          // then don't bother with collision detection (intervals will be grouped on tracks
          // solely by the value of track_split_field)

          if (this.layout.track_split_field && this.layout.split_tracks) {
            var val = this.data[i][this.layout.track_split_field];
            this.data[i].track = this.track_split_field_index[val];
            this.interval_track_index[this.data[i].track].push(i);
          } else {
            // If not splitting to tracks based on a field value then do so based on collision
            // detection (as how it's done for genes). Use display range/domain data generated
            // above and cast each interval to tracks such that none overlap
            this.tracks = 1;
            this.data[i].track = null;
            var potential_track = 1;

            var _loop = function _loop() {
              var collision_on_potential_track = false;

              _this5.interval_track_index[potential_track].map(function (placed_interval) {
                if (!collision_on_potential_track) {
                  var min_start = Math.min(placed_interval.display_range.start, this.display_range.start);
                  var max_end = Math.max(placed_interval.display_range.end, this.display_range.end);

                  if (max_end - min_start < placed_interval.display_range.width + this.display_range.width) {
                    collision_on_potential_track = true;
                  }
                }
              }.bind(_this5.data[i]));

              if (!collision_on_potential_track) {
                _this5.data[i].track = potential_track;

                _this5.interval_track_index[potential_track].push(_this5.data[i]);
              } else {
                potential_track++;

                if (potential_track > _this5.tracks) {
                  _this5.tracks = potential_track;
                  _this5.interval_track_index[potential_track] = [];
                }
              }
            };

            while (this.data[i].track === null) {
              _loop();
            }
          }
        }.bind(this));
        return this;
      } // Implement the main render function

    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        // Lay out space first
        this.assignTracks(); // Apply filters to only render a specified set of points. Hidden fields will still be given space to render, but not shown.

        var track_data = this._applyFilters(); // Remove any shared highlight nodes and re-render them if we're splitting on tracks
        // At most there will only be dozen or so nodes here (one per track) and each time
        // we render data we may have new tracks, so wiping/redrawing all is reasonable.


        this.svg.group.selectAll('.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-shared').remove();
        Object.keys(this.track_split_field_index).forEach(function (key) {
          // Make a psuedo-element so that we can generate an id for the shared node
          var pseudoElement = {};
          pseudoElement[_this6.layout.track_split_field] = key; // Insert the shared node

          _this6.svg.group.insert('rect', ':first-child').attr('id', _this6.getElementStatusNodeId(pseudoElement)).attr('class', 'lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-shared').attr('rx', _this6.layout.bounding_box_padding).attr('ry', _this6.layout.bounding_box_padding).attr('width', _this6.parent.layout.cliparea.width).attr('height', _this6.getTrackHeight() - _this6.layout.track_vertical_spacing).attr('x', 0).attr('y', (_this6.track_split_field_index[key] - 1) * _this6.getTrackHeight()).style('display', _this6.layout.split_tracks ? null : 'none');
        }); // Render interval groups

        var selection = this.svg.group.selectAll('g.lz-data_layer-intervals').data(track_data, function (d) {
          return d[_this6.layout.id_field];
        });
        selection.enter().append('g').attr('class', 'lz-data_layer-intervals').merge(selection).attr('id', function (d) {
          return _this6.getElementId(d);
        }).each(function (interval) {
          var data_layer = interval.parent; // Render interval status nodes (displayed behind intervals to show highlight
          // without needing to modify interval display element(s))

          var statusnodes = d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).selectAll('rect.lz-data_layer-intervals.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-statusnode-discrete').data([interval], function (d) {
            return "".concat(data_layer.getElementId(d), "-statusnode");
          });
          statusnodes.enter().insert('rect', ':first-child').attr('class', 'lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-statusnode-discrete').merge(statusnodes).attr('id', function (d) {
            return "".concat(data_layer.getElementId(d), "-statusnode");
          }).attr('rx', data_layer.layout.bounding_box_padding).attr('ry', data_layer.layout.bounding_box_padding).style('display', data_layer.layout.split_tracks ? 'none' : null).attr('width', function (d) {
            return d.display_range.width + 2 * data_layer.layout.bounding_box_padding;
          }).attr('height', data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing).attr('x', function (d) {
            return d.display_range.start - data_layer.layout.bounding_box_padding;
          }).attr('y', function (d) {
            return (d.track - 1) * data_layer.getTrackHeight();
          });
          statusnodes.exit().remove(); // Render primary interval rects

          var rects = d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).selectAll('rect.lz-data_layer-intervals.lz-interval_rect').data([interval], function (d) {
            return "".concat(d[data_layer.layout.id_field], "_interval_rect");
          });
          rects.enter().append('rect').attr('class', 'lz-data_layer-intervals lz-interval_rect').merge(rects).attr('width', function (d) {
            return d.display_range.width;
          }).attr('height', data_layer.layout.track_height).attr('x', function (d) {
            return d.display_range.start;
          }).attr('y', function (d) {
            return (d.track - 1) * data_layer.getTrackHeight() + data_layer.layout.bounding_box_padding;
          }).attr('fill', function (d, i) {
            return data_layer.resolveScalableParameter(data_layer.layout.color, d, i);
          }).attr('fill-opacity', function (d, i) {
            return data_layer.resolveScalableParameter(data_layer.layout.fill_opacity, d, i);
          });
          rects.exit().remove(); // Render interval click areas

          var clickareas = d3__WEBPACK_IMPORTED_MODULE_0__["select"](this).selectAll('rect.lz-data_layer-intervals.lz-clickarea').data([interval], function (d) {
            return "".concat(d.interval_name, "_clickarea");
          });
          clickareas.enter().append('rect').attr('class', 'lz-data_layer-intervals lz-clickarea').merge(clickareas).attr('id', function (d) {
            return "".concat(data_layer.getElementId(d), "_clickarea");
          }).attr('rx', data_layer.layout.bounding_box_padding).attr('ry', data_layer.layout.bounding_box_padding).attr('width', function (d) {
            return d.display_range.width;
          }).attr('height', data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing).attr('x', function (d) {
            return d.display_range.start;
          }).attr('y', function (d) {
            return (d.track - 1) * data_layer.getTrackHeight();
          }) // Apply default event emitters to clickareas
          .on('click', function (element_data) {
            element_data.parent.parent.emit('element_clicked', element_data, true);
          }) // Apply mouse behaviors to clickareas
          .call(data_layer.applyBehaviors.bind(data_layer)); // Remove old clickareas as needed

          clickareas.exit().remove();
        }); // // Remove old elements as needed

        selection.exit().remove(); // // Update the legend axis if the number of ticks changed
        // if (this.previous_tracks !== this.tracks) {
        //     this.updateSplitTrackAxis();
        // }
        // // The intervals track allows legends to be dynamically generated, in which case space can only be
        // //  allocated after the panel has been rendered.

        if (this.parent && this.parent.legend) {
          this.parent.legend.render();
        }

        return this;
      }
    }, {
      key: "_getTooltipPosition",
      value: function _getTooltipPosition(tooltip) {
        var interval_bbox = d3__WEBPACK_IMPORTED_MODULE_0__["select"]("#".concat(this.getElementStatusNodeId(tooltip.data))).node().getBBox();
        return {
          x_min: tooltip.data.display_range.start,
          x_max: tooltip.data.display_range.end,
          y_min: interval_bbox.y,
          y_max: interval_bbox.y + interval_bbox.height
        };
      } // Redraw split track axis or hide it, and show/hide the legend, as determined
      // by current layout parameters and data

    }, {
      key: "updateSplitTrackAxis",
      value: function updateSplitTrackAxis() {
        var _this7 = this;

        var legend_axis = this.layout.track_split_legend_to_y_axis ? "y".concat(this.layout.track_split_legend_to_y_axis) : false;

        if (this.layout.split_tracks) {
          var tracks = +this.tracks || 0;
          var track_height = +this.layout.track_height || 0;
          var track_spacing = 2 * (+this.layout.bounding_box_padding || 0) + (+this.layout.track_vertical_spacing || 0);
          var target_height = tracks * track_height + (tracks - 1) * track_spacing;
          this.parent.scaleHeightToData(target_height); // DEFECT

          if (legend_axis && this.parent.legend) {
            this.parent.legend.hide();
            this.parent.layout.axes[legend_axis] = {
              render: true,
              ticks: [],
              range: {
                start: target_height - this.layout.track_height / 2,
                end: this.layout.track_height / 2
              }
            }; // There is a very tight coupling between the display directives: each legend item must identify a key
            //  field for unique tracks. (Typically this is `state_id`, the same key field used to assign unique colors)
            // The list of unique keys corresponds to the order along the y-axis

            this.layout.legend.forEach(function (element) {
              var key = element[_this7.layout.track_split_field];
              var track = _this7.track_split_field_index[key];

              if (track) {
                if (_this7.layout.track_split_order === 'DESC') {
                  track = Math.abs(track - tracks - 1);
                }

                _this7.parent.layout.axes[legend_axis].ticks.push({
                  y: track,
                  text: element.label
                });
              }
            });
            this.layout.y_axis = {
              axis: this.layout.track_split_legend_to_y_axis,
              floor: 1,
              ceiling: tracks
            };
            this.parent.render();
          }

          this.parent_plot.positionPanels();
        } else {
          if (legend_axis && this.parent.legend) {
            if (!this.layout.always_hide_legend) {
              this.parent.legend.show();
            }

            this.parent.layout.axes[legend_axis] = {
              render: false
            };
            this.parent.render();
          }
        }

        return this;
      } // Method to not only toggle the split tracks boolean but also update
      // necessary display values to animate a complete merge/split

    }, {
      key: "toggleSplitTracks",
      value: function toggleSplitTracks() {
        this.layout.split_tracks = !this.layout.split_tracks;

        if (this.parent.legend && !this.layout.always_hide_legend) {
          this.parent.layout.margin.bottom = 5 + (this.layout.split_tracks ? 0 : this.parent.legend.layout.height + 5);
        }

        this.render();

        if (!this.layout.split_tracks) {
          // forcing these to go to one will cause a recalculation of the dimensions for the parent_plot
          // otherwise when `scaleHeightToData` runs, min_height (which can get quite large) will dominate plot's
          // layout from updating and can potentially lead to a large amount of whitespace on the screen, as well as stretching panels.
          this.parent_plot.layout.height = 1;
          this.parent_plot.layout.min_height = 1;
          this.parent_plot.layout.min_width = 1; // recalculate proportional heights and widths

          this.parent_plot.positionPanels(); // this.parent_plot.layout.min_height = this.parent_plot._base_layout.min_height;
          // this.parent_plot.layout.min_width = this.parent_plot._base_layout.min_width;
        }

        this.updateSplitTrackAxis();
        return this;
      } // Choose an appropriate color scheme based on the number of items in the track, and whether or not we are
      //  using explicitly provided itemRgb information

    }, {
      key: "_makeColorScheme",
      value: function _makeColorScheme(category_info) {
        // If at least one element has an explicit itemRgb, assume the entire dataset has colors
        var has_explicit_colors = category_info.find(function (item) {
          return item[2];
        });

        if (has_explicit_colors) {
          return category_info.map(function (item) {
            return item[2];
          });
        } // Use a set of color schemes for common 15, 18, or 25 state models, as specified from:
        //  https://egg2.wustl.edu/roadmap/web_portal/chr_state_learning.html
        // These are actually reversed so that dim colors come first, on the premise that usually these are the
        //  most common states


        var n_categories = category_info.length;

        if (n_categories <= 15) {
          return ['rgb(212,212,212)', 'rgb(192,192,192)', 'rgb(128,128,128)', 'rgb(189,183,107)', 'rgb(233,150,122)', 'rgb(205,92,92)', 'rgb(138,145,208)', 'rgb(102,205,170)', 'rgb(255,255,0)', 'rgb(194,225,5)', 'rgb(0,100,0)', 'rgb(0,128,0)', 'rgb(50,205,50)', 'rgb(255,69,0)', 'rgb(255,0,0)'];
        } else if (n_categories <= 18) {
          return ['rgb(212,212,212)', 'rgb(192,192,192)', 'rgb(128,128,128)', 'rgb(189,183,107)', 'rgb(205,92,92)', 'rgb(138,145,208)', 'rgb(102,205,170)', 'rgb(255,255,0)', 'rgb(255,195,77)', 'rgb(255,195,77)', 'rgb(194,225,5)', 'rgb(194,225,5)', 'rgb(0,100,0)', 'rgb(0,128,0)', 'rgb(255,69,0)', 'rgb(255,69,0)', 'rgb(255,69,0)', 'rgb(255,0,0)'];
        } else {
          // If there are more than 25 categories, the interval layer will fall back to the 'null value' option
          return ['rgb(212,212,212)', 'rgb(128,128,128)', 'rgb(112,48,160)', 'rgb(230,184,183)', 'rgb(138,145,208)', 'rgb(102,205,170)', 'rgb(255,255,102)', 'rgb(255,255,0)', 'rgb(255,255,0)', 'rgb(255,255,0)', 'rgb(255,195,77)', 'rgb(255,195,77)', 'rgb(255,195,77)', 'rgb(194,225,5)', 'rgb(194,225,5)', 'rgb(194,225,5)', 'rgb(194,225,5)', 'rgb(0,150,0)', 'rgb(0,128,0)', 'rgb(0,128,0)', 'rgb(0,128,0)', 'rgb(255,69,0)', 'rgb(255,69,0)', 'rgb(255,69,0)', 'rgb(255,0,0)'];
        }
      }
      /**
       * Find all of the unique tracks (a combination of name and ID information)
       * @param {Object} data
       * @param {String} [rgb_field] A field that contains an RGB value. Aimed at BED files with an itemRgb column
       * @private
       * @returns {Array} All [unique_id, label, color] pairs in data. The unique_id is the thing used to define groupings
       *  most unambiguously.
       */

    }, {
      key: "_generateCategoriesFromData",
      value: function _generateCategoriesFromData(data, rgb_field) {
        var _this8 = this;

        var self = this; // Use the hard-coded legend if available (ignoring any mods on re-render)

        var legend = this._base_layout.legend;

        if (legend && legend.length) {
          return legend.map(function (item) {
            return [item[_this8.layout.track_split_field], item.label, item.color];
          });
        } // Generate options from data, if no preset legend exists


        var unique_ids = {}; // make categories unique

        var categories = [];
        data.forEach(function (item) {
          var id = item[self.layout.track_split_field];

          if (!Object.prototype.hasOwnProperty.call(unique_ids, id)) {
            unique_ids[id] = null; // If rgbfield is null, then the last entry is undefined/null as well

            categories.push([id, item[_this8.layout.track_label_field], item[rgb_field]]);
          }
        });
        return categories;
      }
    }]);

    return LzIntervalsTrack;
  }(BaseLayer);

  var intervals_tooltip_layout = {
    namespace: {
      'intervals': 'intervals'
    },
    closable: false,
    show: {
      or: ['highlighted', 'selected']
    },
    hide: {
      and: ['unhighlighted', 'unselected']
    },
    html: '{{{{namespace[intervals]}}state_name|htmlescape}}<br>{{{{namespace[intervals]}}start|htmlescape}}-{{{{namespace[intervals]}}end|htmlescape}}'
  };
  var intervals_layer_layout = {
    namespace: {
      'intervals': 'intervals'
    },
    id: 'intervals',
    type: 'intervals',
    fields: ['{{namespace[intervals]}}start', '{{namespace[intervals]}}end', '{{namespace[intervals]}}state_id', '{{namespace[intervals]}}state_name', '{{namespace[intervals]}}itemRgb'],
    id_field: '{{namespace[intervals]}}start',
    start_field: '{{namespace[intervals]}}start',
    end_field: '{{namespace[intervals]}}end',
    track_split_field: '{{namespace[intervals]}}state_name',
    track_label_field: '{{namespace[intervals]}}state_name',
    split_tracks: false,
    always_hide_legend: true,
    color: [{
      // If present, an explicit color field will override any other option (and be used to auto-generate legend)
      field: '{{namespace[intervals]}}itemRgb',
      scale_function: 'to_rgb'
    }, {
      field: '{{namespace[intervals]}}state_name',
      scale_function: 'categorical_bin',
      parameters: {
        // Placeholder. Empty categories and values will automatically be filled in when new data loads.
        categories: [],
        values: [],
        null_value: '#B8B8B8'
      }
    }],
    legend: [],
    // Placeholder; auto-filled when data loads.
    behaviors: {
      onmouseover: [{
        action: 'set',
        status: 'highlighted'
      }],
      onmouseout: [{
        action: 'unset',
        status: 'highlighted'
      }],
      onclick: [{
        action: 'toggle',
        status: 'selected',
        exclusive: true
      }],
      onshiftclick: [{
        action: 'toggle',
        status: 'selected'
      }]
    },
    tooltip: intervals_tooltip_layout
  };
  var intervals_panel_layout = {
    id: 'intervals',
    width: 1000,
    height: 50,
    min_width: 500,
    min_height: 50,
    margin: {
      top: 25,
      right: 150,
      bottom: 5,
      left: 50
    },
    toolbar: function () {
      var l = LocusZoom.Layouts.get('toolbar', 'standard_panel', {
        unnamespaced: true
      });
      l.widgets.push({
        type: 'toggle_split_tracks',
        data_layer_id: 'intervals',
        position: 'right'
      });
      return l;
    }(),
    axes: {},
    interaction: {
      drag_background_to_pan: true,
      scroll_to_zoom: true,
      x_linked: true
    },
    legend: {
      hidden: true,
      orientation: 'horizontal',
      origin: {
        x: 50,
        y: 0
      },
      pad_from_bottom: 5
    },
    data_layers: [intervals_layer_layout]
  };
  var intervals_plot_layout = {
    state: {},
    width: 800,
    height: 550,
    responsive_resize: true,
    min_region_scale: 20000,
    max_region_scale: 1000000,
    toolbar: LocusZoom.Layouts.get('toolbar', 'standard_association', {
      unnamespaced: true
    }),
    panels: [LocusZoom.Layouts.get('panel', 'association', {
      unnamespaced: true,
      width: 800,
      proportional_height: 225 / 570
    }), Object.assign({
      unnamespaced: true,
      proportional_height: 120 / 570
    }, intervals_panel_layout), LocusZoom.Layouts.get('panel', 'genes', {
      unnamespaced: true,
      width: 800,
      proportional_height: 225 / 570
    })]
  };
  LocusZoom.Adapters.add('IntervalLZ', IntervalLZ);
  LocusZoom.DataLayers.add('intervals', LzIntervalsTrack);
  LocusZoom.Layouts.add('tooltip', 'standard_intervals', intervals_tooltip_layout);
  LocusZoom.Layouts.add('data_layer', 'intervals', intervals_layer_layout);
  LocusZoom.Layouts.add('panel', 'intervals', intervals_panel_layout);
  LocusZoom.Layouts.add('plot', 'interval_association', intervals_plot_layout);
  LocusZoom.ScaleFunctions.add('to_rgb', to_rgb);
  LocusZoom.Widgets.add('toggle_split_tracks', ToggleSplitTracks);
}

if (typeof LocusZoom !== 'undefined') {
  // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()
  // eslint-disable-next-line no-undef
  LocusZoom.use(install);
}

/* harmony default export */ __webpack_exports__["default"] = (install);

/***/ }),

/***/ "d3":
/*!*********************!*\
  !*** external "d3" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = d3;

/***/ })

/******/ })["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,