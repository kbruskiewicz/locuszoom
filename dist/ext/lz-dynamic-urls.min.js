/*! Locuszoom 0.13.0-beta.2 */
var LzDynamicUrls =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./esm/ext/lz-dynamic-urls.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./esm/ext/lz-dynamic-urls.js":
/*!************************************!*\
  !*** ./esm/ext/lz-dynamic-urls.js ***!
  \************************************/
/*! exports provided: default, paramsFromUrl, extractValues, plotUpdatesUrl, plotWatchesUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "paramsFromUrl", function() { return paramsFromUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractValues", function() { return _extractValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "plotUpdatesUrl", function() { return plotUpdatesUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "plotWatchesUrl", function() { return plotWatchesUrl; });
/**
 * Optional LocusZoom extension: must be included separately, and after LocusZoom has been loaded
 *
 * This plugin exports helper functions, but does not modify the global registry. It does not require `LocusZoom.use`.
 *
 * Demonstrates a mechanism by which the plot can be loaded to a specific initial state based on the URL query string
 *  (and, optionally, to update the URL bar when the plot state changes, with back button support)
 *
 * This makes it possible to create "direct links" to a particular plot of interest (and go back to a previous state
 *  as the user interacts with the page). Optionally, there is support for custom callbacks to connect the URL to
 *  arbitrarily complex plot behaviors.
 *  @module
 */
function _serializeQueryParams(paramsObj) {
  // Serialize an object of parameter values into a query string
  // TODO: Improve support for array values v[]=1&v[]=2
  return "?".concat(Object.keys(paramsObj).map(function (key) {
    return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(paramsObj[key]));
  }).join('&'));
}

function _parseQueryParams(queryString) {
  // Parse a query string into an object of parameter values.
  //   Does not attempt any type coercion; all values are, therefore, strings.
  // TODO future: Support arrays / params that specify more than one value
  var query = {};

  if (queryString) {
    var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');

    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i].split('=');
      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
    }
  }

  return query;
} // A useful helper function for serializing values from a provided object


function _extractValues(data, mapping, reverse) {
  // Use the mapping to convert between {stateField: urlParam} (or the reverse). Any fields not referenced in
  //  the "key" side of the mapping will be omitted from the return value.
  // Likewise, will omit any requested keys that the source side of the mapping has no information for
  reverse = reverse || false;
  var ret = {};
  var newMapping = mapping;

  if (reverse) {
    newMapping = {};
    Object.keys(mapping).forEach(function (k) {
      newMapping[mapping[k]] = k;
    });
  }

  Object.keys(newMapping).forEach(function (k) {
    var asName = newMapping[k];

    if (Object.prototype.hasOwnProperty.call(data, k)) {
      ret[asName] = data[k];
    }
  });
  return ret;
}

function _setStateFromUrlHandler(plot, stateData) {
  // A default way to deal with URL changes: push all the params as state into plot and rerender
  // More complex handlers are possible- example, URL parameters could be used to add or remove data layers
  plot.applyState(stateData);
}

function _setUrlFromStateHandler(plot, mapping) {
  // Serialize and return basic query params based solely on information from plot.state
  // More complex handlers are possible- the serializer can extract any information desired because it is given
  //  a direct reference to the plot object
  // This default method does not use the eventContext data, because so many things change plot.state without
  //  officially triggering an event.
  return _extractValues(plot.state, mapping);
}
/**
 * Extract plot parameters from the URL query string. Very useful for setting up the plot on initial page load.
 * @param {object} mapping How to map elements of plot state to URL param fields. Hash of
 *      {plotFieldName: urlParamName} entries (both values should be unique)
 * @param {string} [queryString='window.location.search'] The query string to parse
 * @returns {object} Plot parameter values
 */


function paramsFromUrl(mapping, queryString) {
  // Internal helper function: second argument only used for unit testing
  queryString = queryString || window.location.search;

  var queryParams = _parseQueryParams(queryString);

  return _extractValues(queryParams, mapping, true);
}
/**
 * Allows the plot to monitor changes in the URL and take action when the URL changes.
 *
 * For example, this enables using the browser back button to jump to a previous plot after user interaction.
 *
 * @param {Plot} plot A reference to the LZ plot
 * @param {object} mapping How to map elements of plot state to URL param fields. Hash of
 *      {plotFieldName: urlParamName} entries (both values should be unique)
 * @param {function} [callback] Specify how the plot acts on information read in from query params.
 *   The default behavior is to push the data into `plot.state`
 *   Signature is function(plot, plotDataFromQueryString)
 * @returns {function} The function handle for the new listener (allows cleanup if plot is removed later)
 */


function plotWatchesUrl(plot, mapping, callback) {
  callback = callback || _setStateFromUrlHandler;

  var listener = function listener(event) {
    var urlData = paramsFromUrl(mapping); // Tell the plot what to do with the params extracted from the URL

    callback(plot, urlData);
  };

  window.addEventListener('popstate', listener);
  plot.trackExternalListener(window, 'popstate', listener);
  return listener;
}
/**
 * Update the URL whenever the plot state changes
 * @param {Plot} plot A reference to the LZ plot
 * @param {object} mapping How to map elements of plot state to URL param fields. Hash of
 *      {plotFieldName: urlParamName} entries (both values should be unique)
 * @param {function} [callback] Specify how plot data will be serialized into query params
 *   The default behavior is to extract all the URL params from plot.state as the only source.
 *   Signature is function(plot, mapping, eventContext)
 * @returns {function} The function handle for the new listener (allows cleanup if plot is removed later)
 */


function plotUpdatesUrl(plot, mapping, callback) {
  callback = callback || _setUrlFromStateHandler; // Note: this event only fires when applyState receives *new* information that would trigger a rerender.
  // Plot state is sometimes changed without the event being fired.

  var listener = function listener(eventContext) {
    var oldParams = _parseQueryParams(window.location.search); // Apply custom serialization to convert plot data to URL params


    var serializedPlotData = callback(plot, mapping, eventContext);
    var newParams = Object.assign({}, oldParams, serializedPlotData);
    var update = Object.keys(newParams).some(function (k) {
      // Not every state change would affect the URL. Allow type coercion since query is a string.
      // eslint-disable-next-line eqeqeq
      return oldParams[k] != newParams[k];
    });

    if (update) {
      var queryString = _serializeQueryParams(newParams);

      if (Object.keys(oldParams).length) {
        history.pushState({}, document.title, queryString);
      } else {
        // Prevent broken back behavior on first page load: the first time query params are set,
        //  we don't generate a separate history entry
        history.replaceState({}, document.title, queryString);
      }
    }
  };

  plot.on('state_changed', listener);
  return listener;
} // Slight build quirk: we use a single webpack file for all modules, but `libraryTarget` expects the entire
//  module to be exported as `default` in <script> tag mode.


var all = {
  paramsFromUrl: paramsFromUrl,
  extractValues: _extractValues,
  plotUpdatesUrl: plotUpdatesUrl,
  plotWatchesUrl: plotWatchesUrl
};
/* harmony default export */ __webpack_exports__["default"] = (all);


/***/ })

/******/ })["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,