/*! Locuszoom 0.13.0-beta.2 */
var LzAggregationTests =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./esm/ext/lz-aggregation-tests.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./esm/data/adapters.js":
/*!******************************!*\
  !*** ./esm/data/adapters.js ***!
  \******************************/
/*! exports provided: BaseAdapter, BaseApiAdapter, AssociationLZ, ConnectorSource, GeneConstraintLZ, GeneLZ, GwasCatalogLZ, LDServer, PheWASLZ, RecombLZ, StaticSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseAdapter", function() { return BaseAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseApiAdapter", function() { return BaseApiAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssociationLZ", function() { return AssociationLZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectorSource", function() { return ConnectorSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeneConstraintLZ", function() { return GeneConstraintLZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeneLZ", function() { return GeneLZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GwasCatalogLZ", function() { return GwasCatalogLZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LDServer", function() { return LDServer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PheWASLZ", function() { return PheWASLZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecombLZ", function() { return RecombLZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticSource", function() { return StaticSource; });
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Define standard data adapters used to retrieve data (usually from REST APIs)
 * @module
 */
function validateBuildSource(class_name, build, source) {
  // Build OR Source, not both
  if (build && source || !(build || source)) {
    throw new Error("".concat(class_name, " must provide a parameter specifying either \"build\" or \"source\". It should not specify both."));
  } // If the build isn't recognized, our APIs can't transparently select a source to match


  if (build && !['GRCh37', 'GRCh38'].includes(build)) {
    throw new Error("".concat(class_name, " must specify a valid genome build number"));
  }
}
/**
 * Base class for LocusZoom data sources (any). See also: BaseApiAdapter
 * @public
 */


var BaseAdapter = /*#__PURE__*/function () {
  function BaseAdapter(config) {
    _classCallCheck(this, BaseAdapter);

    /**
     * Whether this source should enable caching
     * @member {Boolean}
     */
    this._enableCache = true;
    this._cachedKey = null;
    /**
     * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate
     *  association data if no data was found for that region.
     * @member {boolean}
     */

    this.__dependentSource = false; // Parse configuration options

    this.parseInit(config);
  }
  /**
   * Parse configuration used to create the data source. Many custom sources will override this method to suit their
   *  needs (eg specific config options, or for sources that do not retrieve data from a URL)
   * @protected
   * @param {String|Object} config Basic configuration- either a url, or a config object
   * @param {String} [config.url] The datasource URL
   * @param {String} [config.params] Initial config params for the datasource
   */


  _createClass(BaseAdapter, [{
    key: "parseInit",
    value: function parseInit(config) {
      /** @member {Object} */
      this.params = config.params || {};
    }
    /**
     * A unique identifier that indicates whether cached data is valid for this request. For most sources using GET
     *  requests to a REST API, this is usually the URL.
     * @protected
     * @param {Object} state Information available in plot.state (chr, start, end). Sometimes used to inject globally
     *  available information that influences the request being made.
     * @param {Object} chain The data chain from previous requests made in a sequence.
     * @param fields
     * @returns {String|undefined}
     */

  }, {
    key: "getCacheKey",
    value: function getCacheKey(state, chain, fields) {
      return this.getURL(state, chain, fields);
    }
    /**
     * Stub: build the URL for any requests made by this source.
     * @protected
     */

  }, {
    key: "getURL",
    value: function getURL(state, chain, fields) {
      return this.url;
    }
    /**
     * Perform a network request to fetch data for this source. This is usually the method that is used to override
     *  when defining how to retrieve data.
     * @protected
     * @param {Object} state The state of the parent plot
     * @param chain
     * @param fields
     * @returns {Promise}
     */

  }, {
    key: "fetchRequest",
    value: function fetchRequest(state, chain, fields) {
      var url = this.getURL(state, chain, fields);
      return fetch(url).then(function (response) {
        if (!response.ok) {
          throw new Error(response.statusText);
        }

        return response.text();
      });
    }
    /**
     * Gets the data for just this source, typically via a network request (but using cache where possible)
     *
     * For most use cases, it is better to override `fetchRequest` instead, to avoid bypassing the cache mechanism
     * by accident.
     * @protected
     */

  }, {
    key: "getRequest",
    value: function getRequest(state, chain, fields) {
      var req;
      var cacheKey = this.getCacheKey(state, chain, fields);

      if (this._enableCache && typeof cacheKey !== 'undefined' && cacheKey === this._cachedKey) {
        req = Promise.resolve(this._cachedResponse); // Resolve to the value of the current promise
      } else {
        req = this.fetchRequest(state, chain, fields);

        if (this._enableCache) {
          this._cachedKey = cacheKey;
          this._cachedResponse = req;
        }
      }

      return req;
    }
    /**
     * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].
     * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.
     *
     * Does not apply namespacing, transformations, or field extraction.
     *
     * May be overridden by data sources that inherently return more complex payloads, or that exist to annotate other
     *  sources (eg, if the payload provides extra data rather than a series of records).
     * @protected
     * @param {Object[]|Object} data The original parsed server response
     */

  }, {
    key: "normalizeResponse",
    value: function normalizeResponse(data) {
      if (Array.isArray(data)) {
        // Already in the desired form
        return data;
      } // Otherwise, assume the server response is an object representing columns of data.
      // Each array should have the same length (verify), and a given array index corresponds to a single row.


      var keys = Object.keys(data);
      var N = data[keys[0]].length;
      var sameLength = keys.every(function (key) {
        var item = data[key];
        return item.length === N;
      });

      if (!sameLength) {
        throw new Error("".concat(this.constructor.name, " expects a response in which all arrays of data are the same length"));
      } // Go down the rows, and create an object for each record


      var records = [];
      var fields = Object.keys(data);

      for (var i = 0; i < N; i++) {
        var record = {};

        for (var j = 0; j < fields.length; j++) {
          record[fields[j]] = data[fields[j]][i];
        }

        records.push(record);
      }

      return records;
    }
    /**
     * Hook to post-process the data returned by this source with new, additional behavior.
     *   (eg cleaning up API values or performing complex calculations on the returned data)
     *
     * @protected
     * @param {Object[]} records The parsed data from the source (eg standardized api response)
     * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata
     * @returns {Object[]|Promise} The modified set of records
     */

  }, {
    key: "annotateData",
    value: function annotateData(records, chain) {
      // Default behavior: no transformations
      return records;
    }
    /**
     * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.
     *   Apply per-field transformations as appropriate.
     *
     * This hook can be overridden, eg to create a source that always returns all records and ignores the "fields" array.
     *  This is particularly common for sources at the end of a chain- many "dependent" sources do not allow
     *  cherry-picking individual fields, in which case by **convention** the fields array specifies "last_source_name:all"
     *
     * @protected
     * @param {Object[]} data One record object per element
     * @param {String[]} fields The names of fields to extract (as named in the source data). Eg "afield"
     * @param {String[]} outnames How to represent the source fields in the output. Eg "namespace:afield|atransform"
     * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.
     * @protected
     */

  }, {
    key: "extractFields",
    value: function extractFields(data, fields, outnames, trans) {
      //intended for an array of objects
      //  [ {"id":1, "val":5}, {"id":2, "val":10}]
      // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through
      if (!Array.isArray(data)) {
        return data;
      }

      if (!data.length) {
        // Sometimes there are regions that just don't have data- this should not trigger a missing field error message!
        return data;
      }

      var fieldFound = [];

      for (var k = 0; k < fields.length; k++) {
        fieldFound[k] = 0;
      }

      var records = data.map(function (item) {
        var output_record = {};

        for (var j = 0; j < fields.length; j++) {
          var val = item[fields[j]];

          if (typeof val != 'undefined') {
            fieldFound[j] = 1;
          }

          if (trans && trans[j]) {
            val = trans[j](val);
          }

          output_record[outnames[j]] = val;
        }

        return output_record;
      });
      fieldFound.forEach(function (v, i) {
        if (!v) {
          throw new Error("field ".concat(fields[i], " not found in response for ").concat(outnames[i]));
        }
      });
      return records;
    }
    /**
     * Combine records from this source with others in the chain to yield final chain body.
     *   Handles merging this data with other sources (if applicable).
     *
     * @protected
     * @param {Object[]} data The data That would be returned from this source alone
     * @param {Object} chain The data chain built up during previous requests
     * @param {String[]} fields
     * @param {String[]} outnames
     * @param {String[]} trans
     * @return {Promise|Object[]} The new chain body
     */

  }, {
    key: "combineChainBody",
    value: function combineChainBody(data, chain, fields, outnames, trans) {
      return data;
    }
    /**
     * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be
     *  overridden separately for fine-grained control. Each step can return either raw data or a promise.
     *
     * @protected
     *
     * @param {String|Object} resp The raw data associated with the response
     * @param {Object} chain The combined parsed response data from this and all other requests made in the chain
     * @param {String[]} fields Array of requested field names (as they would appear in the response payload)
     * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,
     *  including the namespace. This must be an array with the same length as `fields`
     * @param {Function[]} trans The collection of transformation functions to be run on selected fields.
     *     This must be an array with the same length as `fields`
     * @returns {Promise} A promise that resolves to an object containing
     *   request metadata (`headers: {}`), the consolidated data for plotting (`body: []`), and the individual responses that would be
     *   returned by each source in the chain in isolation (`discrete: {}`)
     */

  }, {
    key: "parseResponse",
    value: function parseResponse(resp, chain, fields, outnames, trans) {
      var _this = this;

      var source_id = this.source_id || this.constructor.name;

      if (!chain.discrete) {
        chain.discrete = {};
      }

      var json = typeof resp == 'string' ? JSON.parse(resp) : resp; // Perform the 4 steps of parsing the payload and return a combined chain object

      return Promise.resolve(this.normalizeResponse(json.data || json)).then(function (standardized) {
        // Perform calculations on the data from just this source
        return Promise.resolve(_this.annotateData(standardized, chain));
      }).then(function (data) {
        return Promise.resolve(_this.extractFields(data, fields, outnames, trans));
      }).then(function (one_source_body) {
        // Store a copy of the data that would be returned by parsing this source in isolation (and taking the
        //   fields array into account). This is useful when we want to re-use the source output in many ways.
        chain.discrete[source_id] = one_source_body;
        return Promise.resolve(_this.combineChainBody(one_source_body, chain, fields, outnames, trans));
      }).then(function (new_body) {
        return {
          header: chain.header || {},
          discrete: chain.discrete,
          body: new_body
        };
      });
    }
    /**
     * Fetch the data from the specified data source, and apply transformations requested by an external consumer.
     * This is the public-facing datasource method that will most be called by the plot, but custom data sources will
     *  almost never want to override this method directly- more specific hooks are provided to control individual pieces
     *  of the request lifecycle.
     *
     * @private
     * @param {Object} state The current "state" of the plot, such as chromosome and start/end positions
     * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the "namespace" prefix)
     * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the
     *     originally requested field name, including the namespace. This must be an array with the same length as `fields`
     * @param {Function[]} trans The collection of transformation functions to be run on selected fields.
     *     This must be an array with the same length as `fields`
     * @returns {function} A callable operation that can be used as part of the data chain
     */

  }, {
    key: "getData",
    value: function getData(state, fields, outnames, trans) {
      var _this2 = this;

      if (this.preGetData) {
        // TODO try to remove this method if at all possible
        var pre = this.preGetData(state, fields, outnames, trans);

        if (this.pre) {
          state = pre.state || state;
          fields = pre.fields || fields;
          outnames = pre.outnames || outnames;
          trans = pre.trans || trans;
        }
      }

      return function (chain) {
        if (_this2.__dependentSource && chain && chain.body && !chain.body.length) {
          // A "dependent" source should not attempt to fire a request if there is no data for it to act on.
          // Therefore, it should simply return the previous data chain.
          return Promise.resolve(chain);
        }

        return _this2.getRequest(state, chain, fields).then(function (resp) {
          return _this2.parseResponse(resp, chain, fields, outnames, trans);
        });
      };
    }
  }]);

  return BaseAdapter;
}();
/**
 * Base source for LocusZoom data sources that receive their data over the web. Adds default config parameters
 *  (and potentially other behavior) that are relevant to URL-based requests.
 */


var BaseApiAdapter = /*#__PURE__*/function (_BaseAdapter) {
  _inherits(BaseApiAdapter, _BaseAdapter);

  var _super = _createSuper(BaseApiAdapter);

  function BaseApiAdapter() {
    _classCallCheck(this, BaseApiAdapter);

    return _super.apply(this, arguments);
  }

  _createClass(BaseApiAdapter, [{
    key: "parseInit",
    value: function parseInit(config) {
      _get(_getPrototypeOf(BaseApiAdapter.prototype), "parseInit", this).call(this, config);
      /** @member {String} */


      this.url = config.url;

      if (!this.url) {
        throw new Error('Source not initialized with required URL');
      }
    }
  }]);

  return BaseApiAdapter;
}(BaseAdapter);
/**
 * Data Source for Association Data from the LocusZoom/ Portaldev API (or compatible). Defines how to make a requesr
 * @public
 */


var AssociationLZ = /*#__PURE__*/function (_BaseApiAdapter) {
  _inherits(AssociationLZ, _BaseApiAdapter);

  var _super2 = _createSuper(AssociationLZ);

  function AssociationLZ() {
    _classCallCheck(this, AssociationLZ);

    return _super2.apply(this, arguments);
  }

  _createClass(AssociationLZ, [{
    key: "preGetData",
    value: function preGetData(state, fields, outnames, trans) {
      // TODO: Modify internals to see if we can go without this method
      var id_field = this.params.id_field || 'id';
      [id_field, 'position'].forEach(function (x) {
        if (!fields.includes(x)) {
          fields.unshift(x);
          outnames.unshift(x);
          trans.unshift(null);
        }
      });
      return {
        fields: fields,
        outnames: outnames,
        trans: trans
      };
    }
  }, {
    key: "getURL",
    value: function getURL(state, chain, fields) {
      var analysis = chain.header.analysis || this.params.source || this.params.analysis; // Old usages called this param "analysis"

      if (typeof analysis == 'undefined') {
        throw new Error('Association source must specify an analysis ID to plot');
      }

      return "".concat(this.url, "results/?filter=analysis in ").concat(analysis, " and chromosome in  '").concat(state.chr, "' and position ge ").concat(state.start, " and position le ").concat(state.end);
    }
  }, {
    key: "normalizeResponse",
    value: function normalizeResponse(data) {
      // Some association sources do not sort their data in a predictable order, which makes it hard to reliably
      //  align with other sources (such as LD). For performance reasons, sorting is an opt-in argument.
      // TODO: Consider more fine grained sorting control in the future. This was added as a very specific
      //   workaround for the original T2D portal.
      data = _get(_getPrototypeOf(AssociationLZ.prototype), "normalizeResponse", this).call(this, data);

      if (this.params && this.params.sort && data.length && data[0]['position']) {
        data.sort(function (a, b) {
          return a['position'] - b['position'];
        });
      }

      return data;
    }
  }]);

  return AssociationLZ;
}(BaseApiAdapter);
/**
 * Fetch linkage disequilibrium information from a UMich LDServer-compatible API
 *
 * This source is designed to connect its results to association data, and therefore depends on association data having
 *  been loaded by a previous request in the data chain.
 *
 * In older versions of LocusZoom, this was known as "LDServer". A prior source (targeted at older APIs) has been removed.
 */


var LDServer = /*#__PURE__*/function (_BaseApiAdapter2) {
  _inherits(LDServer, _BaseApiAdapter2);

  var _super3 = _createSuper(LDServer);

  function LDServer(config) {
    var _this3;

    _classCallCheck(this, LDServer);

    _this3 = _super3.call(this, config);
    _this3.__dependentSource = true;
    return _this3;
  }

  _createClass(LDServer, [{
    key: "preGetData",
    value: function preGetData(state, fields) {
      if (fields.length > 1) {
        if (fields.length !== 2 || !fields.includes('isrefvar')) {
          throw new Error("LD does not know how to get all fields: ".concat(fields.join(', ')));
        }
      }
    }
  }, {
    key: "findMergeFields",
    value: function findMergeFields(chain) {
      // Find the fields (as provided by a previous step in the chain, like an association source) that will be needed to
      //  combine LD data with existing information
      // Since LD information may be shared across multiple assoc sources with different namespaces,
      //   we use regex to find columns to join on, rather than requiring exact matches
      var exactMatch = function exactMatch(arr) {
        return function () {
          var regexes = arguments;

          var _loop = function _loop(i) {
            var regex = regexes[i];
            var m = arr.filter(function (x) {
              return x.match(regex);
            });

            if (m.length) {
              return {
                v: m[0]
              };
            }
          };

          for (var i = 0; i < regexes.length; i++) {
            var _ret = _loop(i);

            if (_typeof(_ret) === "object") return _ret.v;
          }

          return null;
        };
      };

      var dataFields = {
        id: this.params.id_field,
        position: this.params.position_field,
        pvalue: this.params.pvalue_field,
        _names_: null
      };

      if (chain && chain.body && chain.body.length > 0) {
        var names = Object.keys(chain.body[0]);
        var nameMatch = exactMatch(names); // Internally, fields are generally prefixed with the name of the source they come from.
        // If the user provides an id_field (like `variant`), it should work across data sources( `assoc1:variant`,
        //  assoc2:variant), but not match fragments of other field names (assoc1:variant_thing)
        // Note: these lookups hard-code a couple of common fields that will work based on known APIs in the wild

        var id_match = dataFields.id && nameMatch(new RegExp("".concat(dataFields.id, "\\b")));
        dataFields.id = id_match || nameMatch(/\bvariant\b/) || nameMatch(/\bid\b/);
        dataFields.position = dataFields.position || nameMatch(/\bposition\b/i, /\bpos\b/i);
        dataFields.pvalue = dataFields.pvalue || nameMatch(/\bpvalue\b/i, /\blog_pvalue\b/i);
        dataFields._names_ = names;
      }

      return dataFields;
    }
  }, {
    key: "findRequestedFields",
    value: function findRequestedFields(fields, outnames) {
      // Assumption: all usages of this source will only ever ask for "isrefvar" or "state". This maps to output names.
      var obj = {};

      for (var i = 0; i < fields.length; i++) {
        if (fields[i] === 'isrefvar') {
          obj.isrefvarin = fields[i];
          obj.isrefvarout = outnames && outnames[i];
        } else {
          obj.ldin = fields[i];
          obj.ldout = outnames && outnames[i];
        }
      }

      return obj;
    }
  }, {
    key: "normalizeResponse",
    value: function normalizeResponse(data) {
      // The LD API payload does not obey standard format conventions; do not try to transform it.
      return data;
    }
    /**
     * Get the LD reference variant, which by default will be the most significant hit in the assoc results
     *   This will be used in making the original query to the LD server for pairwise LD information
     * @returns {*|string} The marker id (expected to be in `chr:pos_ref/alt` format) of the reference variant
     */

  }, {
    key: "getRefvar",
    value: function getRefvar(state, chain, fields) {
      var findExtremeValue = function findExtremeValue(records, pval_field) {
        // Finds the most significant hit (smallest pvalue, or largest -log10p). Will try to auto-detect the appropriate comparison.
        pval_field = pval_field || 'log_pvalue'; // The official LZ API returns log_pvalue

        var is_log = /log/.test(pval_field);
        var cmp;

        if (is_log) {
          cmp = function cmp(a, b) {
            return a > b;
          };
        } else {
          cmp = function cmp(a, b) {
            return a < b;
          };
        }

        var extremeVal = records[0][pval_field],
            extremeIdx = 0;

        for (var i = 1; i < records.length; i++) {
          if (cmp(records[i][pval_field], extremeVal)) {
            extremeVal = records[i][pval_field];
            extremeIdx = i;
          }
        }

        return extremeIdx;
      };

      var reqFields = this.findRequestedFields(fields);
      var refVar = reqFields.ldin;

      if (refVar === 'state') {
        refVar = state.ldrefvar || chain.header.ldrefvar || 'best';
      }

      if (refVar === 'best') {
        if (!chain.body) {
          throw new Error('No association data found to find best pvalue');
        }

        var keys = this.findMergeFields(chain);

        if (!keys.pvalue || !keys.id) {
          var columns = '';

          if (!keys.id) {
            columns += "".concat(columns.length ? ', ' : '', "id");
          }

          if (!keys.pvalue) {
            columns += "".concat(columns.length ? ', ' : '', "pvalue");
          }

          throw new Error("Unable to find necessary column(s) for merge: ".concat(columns, " (available: ").concat(keys._names_, ")"));
        }

        refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];
      }

      return refVar;
    }
  }, {
    key: "getURL",
    value: function getURL(state, chain, fields) {
      // Accept the following params in this.params:
      // - method (r, rsquare, cov)
      // - source (aka panel)
      // - population (ALL, AFR, EUR, etc)
      // - build
      // The LD source/pop can be overridden from plot.state for dynamic layouts
      var build = state.genome_build || this.params.build || 'GRCh37';
      var source = state.ld_source || this.params.source || '1000G';
      var population = state.ld_pop || this.params.population || 'ALL'; // LDServer panels will always have an ALL

      var method = this.params.method || 'rsquare';

      if (source === '1000G' && build === 'GRCh38') {
        // For build 38 (only), there is a newer/improved 1000G LD panel available that uses WGS data. Auto upgrade by default.
        source = '1000G-FRZ09';
      }

      validateBuildSource(this.constructor.name, build, null); // LD doesn't need to validate `source` option

      var refVar = this.getRefvar(state, chain, fields); // Some datasets, notably the Portal, use a different marker format.
      //  Coerce it into one that will work with the LDServer API. (CHROM:POS_REF/ALT)

      var REGEX_MARKER = /^(?:chr)?([a-zA-Z0-9]+?)[_:-](\d+)[_:|-]?(\w+)?[/_:|-]?([^_]+)?_?(.*)?/;
      var match = refVar && refVar.match(REGEX_MARKER);

      if (!match) {
        throw new Error('Could not request LD for a missing or incomplete marker format');
      }

      var _match = _slicedToArray(match, 5),
          original = _match[0],
          chrom = _match[1],
          pos = _match[2],
          ref = _match[3],
          alt = _match[4]; // Currently, the LD server only accepts full variant specs; it won't return LD w/o ref+alt. Allowing
      //  a partial match at most leaves room for potential future features.


      refVar = "".concat(chrom, ":").concat(pos);

      if (ref && alt) {
        refVar += "_".concat(ref, "/").concat(alt);
      } // Preserve the user-provided variant spec for use when matching to assoc data


      chain.header.ldrefvar = original;
      return [this.url, 'genome_builds/', build, '/references/', source, '/populations/', population, '/variants', '?correlation=', method, '&variant=', encodeURIComponent(refVar), '&chrom=', encodeURIComponent(state.chr), '&start=', encodeURIComponent(state.start), '&stop=', encodeURIComponent(state.end)].join('');
    }
  }, {
    key: "combineChainBody",
    value: function combineChainBody(data, chain, fields, outnames, trans) {
      var keys = this.findMergeFields(chain);
      var reqFields = this.findRequestedFields(fields, outnames);

      if (!keys.position) {
        throw new Error("Unable to find position field for merge: ".concat(keys._names_));
      }

      var leftJoin = function leftJoin(left, right, lfield, rfield) {
        var i = 0,
            j = 0;

        while (i < left.length && j < right.position2.length) {
          if (left[i][keys.position] === right.position2[j]) {
            left[i][lfield] = right[rfield][j];
            i++;
            j++;
          } else if (left[i][keys.position] < right.position2[j]) {
            i++;
          } else {
            j++;
          }
        }
      };

      var tagRefVariant = function tagRefVariant(data, refvar, idfield, outrefname, outldname) {
        for (var i = 0; i < data.length; i++) {
          if (data[i][idfield] && data[i][idfield] === refvar) {
            data[i][outrefname] = 1;
            data[i][outldname] = 1; // For label/filter purposes, implicitly mark the ref var as LD=1 to itself
          } else {
            data[i][outrefname] = 0;
          }
        }
      }; // LD servers vary slightly. Some report corr as "rsquare", others as "correlation"


      var corrField = data.rsquare ? 'rsquare' : 'correlation';
      leftJoin(chain.body, data, reqFields.ldout, corrField);

      if (reqFields.isrefvarin && chain.header.ldrefvar) {
        tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout, reqFields.ldout);
      }

      return chain.body;
    }
  }, {
    key: "fetchRequest",
    value: function fetchRequest(state, chain, fields) {
      // The API is paginated, but we need all of the data to render a plot. Depaginate and combine where appropriate.
      var url = this.getURL(state, chain, fields);
      var combined = {
        data: {}
      };

      var chainRequests = function chainRequests(url) {
        return fetch(url).then().then(function (response) {
          if (!response.ok) {
            throw new Error(response.statusText);
          }

          return response.text();
        }).then(function (payload) {
          payload = JSON.parse(payload);
          Object.keys(payload.data).forEach(function (key) {
            combined.data[key] = (combined.data[key] || []).concat(payload.data[key]);
          });

          if (payload.next) {
            return chainRequests(payload.next);
          }

          return combined;
        });
      };

      return chainRequests(url);
    }
  }]);

  return LDServer;
}(BaseApiAdapter);
/**
 * Data source for GWAS catalogs of known variants
 * @public
 * @class
 * @param {Object|String} init Configuration (URL or object)
 * @param {Object} [init.params] Optional configuration parameters
 * @param {Number} [init.params.source=2] The ID of the chosen catalog. Defaults to EBI GWAS catalog, GRCh37
 * @param {('strict'|'loose')} [init.params.match_type='strict'] Whether to match on exact variant, or just position.
 */


var GwasCatalogLZ = /*#__PURE__*/function (_BaseApiAdapter3) {
  _inherits(GwasCatalogLZ, _BaseApiAdapter3);

  var _super4 = _createSuper(GwasCatalogLZ);

  function GwasCatalogLZ(config) {
    var _this4;

    _classCallCheck(this, GwasCatalogLZ);

    _this4 = _super4.call(this, config);
    _this4.__dependentSource = true;
    return _this4;
  }

  _createClass(GwasCatalogLZ, [{
    key: "getURL",
    value: function getURL(state, chain, fields) {
      // This is intended to be aligned with another source- we will assume they are always ordered by position, asc
      //  (regardless of the actual match field)
      var build_option = state.genome_build || this.params.build;
      validateBuildSource(this.constructor.name, build_option, null); // Source can override build- not mutually exclusive
      // Most of our annotations will respect genome build before any other option.
      //   But there can be more than one GWAS catalog version available in the same API, for the same build- an
      //   explicit config option will always take
      //   precedence.
      // See: http://portaldev.sph.umich.edu/api/v1/annotation/gwascatalog/?format=objects

      var default_source = build_option === 'GRCh38' ? 5 : 6; // EBI GWAS catalog

      var source = this.params.source || default_source;
      return "".concat(this.url, "?format=objects&sort=pos&filter=id eq ").concat(source, " and chrom eq '").concat(state.chr, "' and pos ge ").concat(state.start, " and pos le ").concat(state.end);
    }
  }, {
    key: "findMergeFields",
    value: function findMergeFields(records) {
      // Data from previous sources is already namespaced. Find the alignment field by matching.
      var knownFields = Object.keys(records); // Note: All API endoints involved only give results for 1 chromosome at a time; match is implied

      var posMatch = knownFields.find(function (item) {
        return item.match(/\b(position|pos)\b/i);
      });

      if (!posMatch) {
        throw new Error('Could not find data to align with GWAS catalog results');
      }

      return {
        'pos': posMatch
      };
    }
  }, {
    key: "extractFields",
    value: function extractFields(data, fields, outnames, trans) {
      // Skip the "individual field extraction" step; extraction will be handled when building chain body instead
      return data;
    }
  }, {
    key: "combineChainBody",
    value: function combineChainBody(data, chain, fields, outnames, trans) {
      if (!data.length) {
        return chain.body;
      } //  TODO: Better reuse options in the future. This source is very specifically tied to the PortalDev API, where
      //   the field name is always "log_pvalue". Relatively few sites will write their own gwas-catalog endpoint.


      var decider = 'log_pvalue';
      var decider_out = outnames[fields.indexOf(decider)];

      function leftJoin(left, right, fields, outnames, trans) {
        // Add `fields` from `right` to `left`
        // Add a synthetic, un-namespaced field to all matching records
        var n_matches = left['n_catalog_matches'] || 0;
        left['n_catalog_matches'] = n_matches + 1;

        if (decider && left[decider_out] && left[decider_out] > right[decider]) {
          // There may be more than one GWAS catalog entry for the same SNP. This source is intended for a 1:1
          //  annotation scenario, so for now it only joins the catalog entry that has the best -log10 pvalue
          return;
        }

        for (var _j = 0; _j < fields.length; _j++) {
          var fn = fields[_j];
          var outn = outnames[_j];
          var val = right[fn];

          if (trans && trans[_j]) {
            val = trans[_j](val);
          }

          left[outn] = val;
        }
      }

      var chainNames = this.findMergeFields(chain.body[0]);
      var catNames = this.findMergeFields(data[0]);
      var i = 0,
          j = 0;

      while (i < chain.body.length && j < data.length) {
        var left = chain.body[i];
        var right = data[j];

        if (left[chainNames.pos] === right[catNames.pos]) {
          // There may be multiple catalog entries for each matching SNP; evaluate match one at a time
          leftJoin(left, right, fields, outnames, trans);
          j += 1;
        } else if (left[chainNames.pos] < right[catNames.pos]) {
          i += 1;
        } else {
          j += 1;
        }
      }

      return chain.body;
    }
  }]);

  return GwasCatalogLZ;
}(BaseApiAdapter);
/**
 * Data Source for Gene Data, as fetched from the LocusZoom/Portaldev API server (or compatible format)
 * @public
 */


var GeneLZ = /*#__PURE__*/function (_BaseApiAdapter4) {
  _inherits(GeneLZ, _BaseApiAdapter4);

  var _super5 = _createSuper(GeneLZ);

  function GeneLZ() {
    _classCallCheck(this, GeneLZ);

    return _super5.apply(this, arguments);
  }

  _createClass(GeneLZ, [{
    key: "getURL",
    value: function getURL(state, chain, fields) {
      var build = state.genome_build || this.params.build;
      var source = this.params.source;
      validateBuildSource(this.constructor.name, build, source);

      if (build) {
        // If build specified, we auto-select the best current portaldev API dataset for that build
        // If build is not specified, we use the exact source ID provided by the user.
        // See: https://portaldev.sph.umich.edu/api/v1/annotation/genes/sources/?format=objects
        source = build === 'GRCh38' ? 4 : 5;
      }

      return "".concat(this.url, "?filter=source in ").concat(source, " and chrom eq '").concat(state.chr, "' and start le ").concat(state.end, " and end ge ").concat(state.start);
    }
  }, {
    key: "normalizeResponse",
    value: function normalizeResponse(data) {
      // Genes have a very complex internal data format. Bypass any record parsing, and provide the data layer with
      // the exact information returned by the API. (ignoring the fields array in the layout)
      return data;
    }
  }, {
    key: "extractFields",
    value: function extractFields(data, fields, outnames, trans) {
      return data;
    }
  }]);

  return GeneLZ;
}(BaseApiAdapter);
/**
 * Data Source for Gene Constraint Data, as fetched from the gnomAD server (or compatible)
 *
 * This is intended to be the second request in a chain, with special logic that connects it to Genes data
 *  already fetched.
 *
 * @public
*/


var GeneConstraintLZ = /*#__PURE__*/function (_BaseApiAdapter5) {
  _inherits(GeneConstraintLZ, _BaseApiAdapter5);

  var _super6 = _createSuper(GeneConstraintLZ);

  function GeneConstraintLZ(config) {
    var _this5;

    _classCallCheck(this, GeneConstraintLZ);

    _this5 = _super6.call(this, config);
    _this5.__dependentSource = true;
    return _this5;
  }

  _createClass(GeneConstraintLZ, [{
    key: "getURL",
    value: function getURL() {
      // GraphQL API: request details are encoded in the body, not the URL
      return this.url;
    }
  }, {
    key: "getCacheKey",
    value: function getCacheKey(state, chain, fields) {
      var build = state.genome_build || this.params.build; // GraphQL API: request not defined solely by the URL
      // Gather the state params that govern constraint query for a given region.

      return "".concat(this.url, " ").concat(state.chr, " ").concat(state.start, " ").concat(state.end, " ").concat(build);
    }
  }, {
    key: "normalizeResponse",
    value: function normalizeResponse(data) {
      return data;
    }
  }, {
    key: "fetchRequest",
    value: function fetchRequest(state, chain, fields) {
      var build = state.genome_build || this.params.build;

      if (!build) {
        throw new Error("Data source ".concat(this.constructor.name, " must specify a 'genome_build' option"));
      }

      var unique_gene_names = chain.body.reduce( // In rare cases, the same gene symbol may appear at multiple positions. (issue #179) We de-duplicate the
      //  gene names to avoid issuing a malformed GraphQL query.
      function (acc, gene) {
        acc[gene.gene_name] = null;
        return acc;
      }, {});
      var query = Object.keys(unique_gene_names).map(function (gene_name) {
        // GraphQL alias names must match a specific set of allowed characters: https://stackoverflow.com/a/45757065/1422268
        var alias = "_".concat(gene_name.replace(/[^A-Za-z0-9_]/g, '_')); // Each gene symbol is a separate graphQL query, grouped into one request using aliases

        return "".concat(alias, ": gene(gene_symbol: \"").concat(gene_name, "\", reference_genome: ").concat(build, ") { gnomad_constraint { exp_syn obs_syn syn_z oe_syn oe_syn_lower oe_syn_upper exp_mis obs_mis mis_z oe_mis oe_mis_lower oe_mis_upper exp_lof obs_lof pLI oe_lof oe_lof_lower oe_lof_upper } } ");
      });

      if (!query.length) {
        // If there are no genes, skip the network request
        return Promise.resolve({
          data: null
        });
      }

      query = "{".concat(query.join(' '), " }"); // GraphQL isn't quite JSON; items are separated by spaces but not commas

      var url = this.getURL(state, chain, fields); // See: https://graphql.org/learn/serving-over-http/

      var body = JSON.stringify({
        query: query
      });
      var headers = {
        'Content-Type': 'application/json'
      }; // FIXME: The gnomAD API sometimes has temporary CORS changes that temporarily break the genes track
      // If request blocked, return  a fake "no data" signal so the genes track can still render w/o constraint info

      return fetch(url, {
        method: 'POST',
        body: body,
        headers: headers
      }).then(function (response) {
        if (!response.ok) {
          return [];
        }

        return response.text();
      })["catch"](function (err) {
        return [];
      });
    }
  }, {
    key: "combineChainBody",
    value: function combineChainBody(data, chain, fields, outnames, trans) {
      if (!data) {
        return chain;
      }

      chain.body.forEach(function (gene) {
        // Find payload keys that match gene names in this response
        var alias = "_".concat(gene.gene_name.replace(/[^A-Za-z0-9_]/g, '_')); // aliases are modified gene names

        var constraint = data[alias] && data[alias]['gnomad_constraint']; // gnomad API has two ways of specifying missing data for a requested gene

        if (constraint) {
          // Add all fields from constraint data- do not override fields present in the gene source
          Object.keys(constraint).forEach(function (key) {
            var val = constraint[key];

            if (typeof gene[key] === 'undefined') {
              if (typeof val == 'number' && val.toString().includes('.')) {
                val = parseFloat(val.toFixed(2));
              }

              gene[key] = val; // These two sources are both designed to bypass namespacing
            }
          });
        }
      });
      return chain.body;
    }
  }]);

  return GeneConstraintLZ;
}(BaseApiAdapter);
/**
 * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)
 * @public
 */


var RecombLZ = /*#__PURE__*/function (_BaseApiAdapter6) {
  _inherits(RecombLZ, _BaseApiAdapter6);

  var _super7 = _createSuper(RecombLZ);

  function RecombLZ() {
    _classCallCheck(this, RecombLZ);

    return _super7.apply(this, arguments);
  }

  _createClass(RecombLZ, [{
    key: "getURL",
    value: function getURL(state, chain, fields) {
      var build = state.genome_build || this.params.build;
      var source = this.params.source;
      validateBuildSource(this.constructor.SOURCE_NAME, build, source);

      if (build) {
        // If build specified, choose a known Portal API dataset IDs (build 37/38)
        source = build === 'GRCh38' ? 16 : 15;
      }

      return "".concat(this.url, "?filter=id in ").concat(source, " and chromosome eq '").concat(state.chr, "' and position le ").concat(state.end, " and position ge ").concat(state.start);
    }
  }]);

  return RecombLZ;
}(BaseApiAdapter);
/**
 * Data Source for static blobs of data as raw JS objects. This does not perform additional parsing, and it bypasses
 * namespaces. Therefore it is the responsibility of the user to pass information in a format that can be read and
 * understood by the chosen plot- a StaticJSON source is rarely a drop-in replacement.
 *
 * This source is largely here for legacy reasons. More often, a convenient way to serve static data is as separate
 *  JSON files to an existing source (with the JSON url in place of an API).
 * @public
 */


var StaticSource = /*#__PURE__*/function (_BaseAdapter2) {
  _inherits(StaticSource, _BaseAdapter2);

  var _super8 = _createSuper(StaticSource);

  function StaticSource() {
    _classCallCheck(this, StaticSource);

    return _super8.apply(this, arguments);
  }

  _createClass(StaticSource, [{
    key: "parseInit",
    value: function parseInit(data) {
      // Does not receive any config; the only argument is the raw data, embedded when source is created
      this._data = data;
    }
  }, {
    key: "getRequest",
    value: function getRequest(state, chain, fields) {
      return Promise.resolve(this._data);
    }
  }]);

  return StaticSource;
}(BaseAdapter);
/**
 * Data source for PheWAS data retrieved from a LocusZoom/PortalDev compatible API
 * @public
 * @param {String[]} init.params.build This datasource expects to be provided the name of the genome build that will
 *   be used to provide pheWAS results for this position. Note positions may not translate between builds.
 */


var PheWASLZ = /*#__PURE__*/function (_BaseApiAdapter7) {
  _inherits(PheWASLZ, _BaseApiAdapter7);

  var _super9 = _createSuper(PheWASLZ);

  function PheWASLZ() {
    _classCallCheck(this, PheWASLZ);

    return _super9.apply(this, arguments);
  }

  _createClass(PheWASLZ, [{
    key: "getURL",
    value: function getURL(state, chain, fields) {
      var build = (state.genome_build ? [state.genome_build] : null) || this.params.build;

      if (!build || !Array.isArray(build) || !build.length) {
        throw new Error(['Data source', this.constructor.SOURCE_NAME, 'requires that you specify array of one or more desired genome build names'].join(' '));
      }

      var url = [this.url, "?filter=variant eq '", encodeURIComponent(state.variant), "'&format=objects&", build.map(function (item) {
        return "build=".concat(encodeURIComponent(item));
      }).join('&')];
      return url.join('');
    }
  }]);

  return PheWASLZ;
}(BaseApiAdapter);
/**
 * Base class for "connectors"- this is meant to be subclassed, rather than used directly.
 *
 * A connector is a source that makes no server requests and caches no data of its own. Instead, it decides how to
 *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some
 *  useful piece of information once, but apply it to many different kinds of record types.
 *
 * Typically, a subclass will implement the field merging logic in `combineChainBody`.
 *
 * @public
 * @param {Object} init Configuration for this source
 * @param {Object} init.sources Specify how the hard-coded logic should find the data it relies on in the chain,
 *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make
 *  assumptions about what namespaces a source is using.
 * @type {*|Function}
 */


var ConnectorSource = /*#__PURE__*/function (_BaseAdapter3) {
  _inherits(ConnectorSource, _BaseAdapter3);

  var _super10 = _createSuper(ConnectorSource);

  function ConnectorSource(config) {
    var _this6;

    _classCallCheck(this, ConnectorSource);

    _this6 = _super10.call(this, config);

    if (!config || !config.sources) {
      throw new Error('Connectors must specify the data they require as init.sources = {internal_name: chain_source_id}} pairs');
    }
    /**
     * Tells the connector how to find the data it relies on
     *
     * For example, a connector that applies burden test information to the genes layer might specify:
     *  {gene_ns: "gene", aggregation_ns: "aggregation"}
     *
     * @member {Object}
     */


    _this6._source_name_mapping = config.sources; // Validate that this source has been told how to find the required information

    var specified_ids = Object.keys(config.sources);
    /** @property {String[]} Specifies the sources that must be provided in the original config object */

    _this6._getRequiredSources().forEach(function (k) {
      if (!specified_ids.includes(k)) {
        // TODO: Fix constructor.name usage in minified bundles
        throw new Error("Configuration for ".concat(_this6.constructor.name, " must specify a source ID corresponding to ").concat(k));
      }
    });

    return _this6;
  } // Stub- connectors don't have their own url or data, so the defaults don't make sense


  _createClass(ConnectorSource, [{
    key: "parseInit",
    value: function parseInit() {}
  }, {
    key: "getRequest",
    value: function getRequest(state, chain, fields) {
      var _this7 = this;

      // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded
      //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.
      Object.keys(this._source_name_mapping).forEach(function (ns) {
        var chain_source_id = _this7._source_name_mapping[ns];

        if (chain.discrete && !chain.discrete[chain_source_id]) {
          throw new Error("".concat(_this7.constructor.name, " cannot be used before loading required data for: ").concat(chain_source_id));
        }
      });
      return Promise.resolve(chain.body || []);
    }
  }, {
    key: "parseResponse",
    value: function parseResponse(data, chain, fields, outnames, trans) {
      // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting
      //  and field selection (both are assumed to have been done already, by the previous sources this draws from)
      // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.
      // Typically connectors are called with `connector_name:all` in the fields array.
      return Promise.resolve(this.combineChainBody(data, chain, fields, outnames, trans)).then(function (new_body) {
        return {
          header: chain.header || {},
          discrete: chain.discrete || {},
          body: new_body
        };
      });
    }
  }, {
    key: "combineChainBody",
    value: function combineChainBody(records, chain) {
      // Stub method: specifies how to combine the data
      throw new Error('This method must be implemented in a subclass');
    }
    /**
     * Helper method since ES6 doesn't support class fields
     * @private
     */

  }, {
    key: "_getRequiredSources",
    value: function _getRequiredSources() {
      throw new Error('Must specify an array that identifes the kind of data required by this source');
    }
  }]);

  return ConnectorSource;
}(BaseAdapter);




/***/ }),

/***/ "./esm/ext/lz-aggregation-tests.js":
/*!*****************************************!*\
  !*** ./esm/ext/lz-aggregation-tests.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var raremetal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raremetal.js */ "raremetal.js");
/* harmony import */ var raremetal_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(raremetal_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _data_adapters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/adapters */ "./esm/data/adapters.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/** @module */

/*
 * LocusZoom extensions used to calculate and render aggregation test results. Because these calculations depend on an
 *   external library, the special data sources are defined here, rather than in LocusZoom core code.
 *
 *     The page must incorporate and load all libraries before this file can be used, including:
 *    - Vendor assets
 *    - LocusZoom
 *    - raremetal.js (available via NPM or a related CDN)
 */
// This is defined as a UMD module, to work with multiple different module systems / bundlers
// Arcane build note: everything defined here gets registered globally. This is not a "pure" module, and some build
//  systems may require being told that this file has side effects.



function install(LocusZoom) {
  /**
   * Data Source that calculates gene or region-based tests based on provided data
   *   It will rarely be used by itself, but rather using a connector that attaches the results to data from
   *   another source (like genes). Using a separate connector allows us to add caching and run this front-end
   *   calculation only once, while using it in many different places
   * @public
   */
  var BaseAdapter = LocusZoom.Adapters.get('BaseAdapter');
  var ConnectorSource = LocusZoom.Adapters.get('ConnectorSource');

  var AggregationTestSource = /*#__PURE__*/function (_BaseApiAdapter) {
    _inherits(AggregationTestSource, _BaseApiAdapter);

    var _super = _createSuper(AggregationTestSource);

    function AggregationTestSource() {
      _classCallCheck(this, AggregationTestSource);

      return _super.apply(this, arguments);
    }

    _createClass(AggregationTestSource, [{
      key: "getURL",
      value: function getURL(state, chain, fields) {
        // Unlike most sources, calculations may require access to plot state data even after the initial request
        // This example source REQUIRES that the external UI widget would store the needed test definitions in a plot state
        //  field called `aggregation_tests` (an object {masks: [], calcs: {})
        var required_info = state.aggregation_tests || {};

        if (!chain.header) {
          chain.header = {};
        } // All of these fields are required in order to use this datasource. TODO: Add validation?


        chain.header.aggregation_genoset_id = required_info.genoset_id || null; // Number

        chain.header.aggregation_genoset_build = required_info.genoset_build || null; // String

        chain.header.aggregation_phenoset_id = required_info.phenoset_id || null; // Number

        chain.header.aggregation_pheno = required_info.pheno || null; // String

        chain.header.aggregation_calcs = required_info.calcs || {}; // String[]

        var mask_data = required_info.masks || [];
        chain.header.aggregation_masks = mask_data; // {name:desc}[]

        chain.header.aggregation_mask_ids = mask_data.map(function (item) {
          return item.name;
        }); // Number[]

        return this.url;
      }
    }, {
      key: "getCacheKey",
      value: function getCacheKey(state, chain, fields) {
        this.getURL(state, chain, fields); // TODO: This just sets the chain.header fields

        return JSON.stringify({
          chrom: state.chr,
          start: state.start,
          stop: state.end,
          genotypeDataset: chain.header.aggregation_genoset_id,
          phenotypeDataset: chain.header.aggregation_phenoset_id,
          phenotype: chain.header.aggregation_pheno,
          samples: 'ALL',
          genomeBuild: chain.header.aggregation_genoset_build,
          masks: chain.header.aggregation_mask_ids
        });
      }
    }, {
      key: "fetchRequest",
      value: function fetchRequest(state, chain, fields) {
        var url = this.getURL(state, chain, fields);
        var body = this.getCacheKey(state, chain, fields);
        var headers = {
          'Content-Type': 'application/json'
        };
        return fetch(url, {
          method: 'POST',
          body: body,
          headers: headers
        }).then(function (response) {
          if (!response.ok) {
            throw new Error(response.statusText);
          }

          return response.text();
        }).then(function (resp) {
          var json = typeof resp == 'string' ? JSON.parse(resp) : resp;

          if (json.error) {
            // RAREMETAL-server quirk: The API sometimes returns a 200 status code for failed requests,
            //    with a human-readable error description as a key
            // For now, this should be treated strictly as an error
            throw new Error(json.error);
          }

          return json;
        });
      }
    }, {
      key: "annotateData",
      value: function annotateData(records, chain) {
        // Operate on the calculated results. The result of this method will be added to chain.discrete
        // In a page using live API data, the UI would only request the masks it needs from the API.
        // But in our demos, sometimes boilerplate JSON has more masks than the UI asked for. Limit what calcs we run (by
        //  type, and to the set of groups requested by the user)
        // The Raremetal-server API has a quirk: it returns a different payload structure if no groups are defined
        //  for the request region. Detect when that happens and end the calculation immediately in that case
        if (!records.groups) {
          return {
            groups: [],
            variants: []
          };
        }

        records.groups = records.groups.filter(function (item) {
          return item.groupType === 'GENE';
        });
        var parsed = raremetal_js__WEBPACK_IMPORTED_MODULE_0__["helpers"].parsePortalJSON(records);
        var groups = parsed[0];
        var variants = parsed[1]; // Some APIs may return more data than we want (eg simple sites that are just serving up premade scorecov json files).
        //  Filter the response to just what the user has chosen to analyze.

        groups = groups.byMask(chain.header.aggregation_mask_ids); // Determine what calculations to run

        var calcs = chain.header.aggregation_calcs;

        if (!calcs || Object.keys(calcs).length === 0) {
          // If no calcs have been requested, then return a dummy placeholder immediately
          return {
            variants: [],
            groups: [],
            results: []
          };
        }

        var runner = new raremetal_js__WEBPACK_IMPORTED_MODULE_0__["helpers"].PortalTestRunner(groups, variants, calcs);
        return runner.toJSON().then(function (res) {
          // Internally, raremetal helpers track how the calculation is done, but not any display-friendly values
          // We will annotate each mask name (id) with a human-friendly description for later use
          var mask_id_to_desc = chain.header.aggregation_masks.reduce(function (acc, val) {
            acc[val.name] = val.description;
            return acc;
          }, {});
          res.data.groups.forEach(function (group) {
            group.mask_name = mask_id_to_desc[group.mask];
          });
          return res.data;
        })["catch"](function (e) {
          console.error(e);
          throw new Error('Failed to calculate aggregation test results');
        });
      }
    }, {
      key: "normalizeResponse",
      value: function normalizeResponse(data) {
        return data;
      }
    }, {
      key: "combineChainBody",
      value: function combineChainBody(records, chain) {
        // aggregation tests are a bit unique, in that the data is rarely used directly- instead it is used to annotate many
        //  other layers in different ways. The calculated result has been added to `chain.discrete`, but will not be returned
        //  as part of the response body built up by the chain
        return chain.body;
      }
    }]);

    return AggregationTestSource;
  }(_data_adapters__WEBPACK_IMPORTED_MODULE_1__["BaseApiAdapter"]);

  var AssocFromAggregationLZ = /*#__PURE__*/function (_BaseAdapter) {
    _inherits(AssocFromAggregationLZ, _BaseAdapter);

    var _super2 = _createSuper(AssocFromAggregationLZ);

    function AssocFromAggregationLZ(config) {
      _classCallCheck(this, AssocFromAggregationLZ);

      if (!config || !config.from) {
        throw 'Must specify the name of the source that contains association data';
      }

      return _super2.apply(this, arguments);
    }

    _createClass(AssocFromAggregationLZ, [{
      key: "parseInit",
      value: function parseInit(config) {
        _get(_getPrototypeOf(AssocFromAggregationLZ.prototype), "parseInit", this).call(this, config);

        this._from = config.from;
      }
    }, {
      key: "getRequest",
      value: function getRequest(state, chain, fields) {
        // Does not actually make a request. Just pick off the specific bundle of data from a known payload structure.
        if (chain.discrete && !chain.discrete[this._from]) {
          throw "".concat(this.constructor.SOURCE_NAME, " cannot be used before loading required data for: ").concat(this._from);
        } // Copy the data so that mutations (like sorting) don't affect the original


        return Promise.resolve(JSON.parse(JSON.stringify(chain.discrete[this._from]['variants'])));
      }
    }, {
      key: "normalizeResponse",
      value: function normalizeResponse(data) {
        // The payload structure of the association source is slightly different than the one required by association
        //   plots. For example, we need to parse variant names and convert to log_pvalue
        var REGEX_EPACTS = new RegExp('(?:chr)?(.+):(\\d+)_?(\\w+)?/?([^_]+)?_?(.*)?'); // match API variant strings

        return data.map(function (one_variant) {
          var match = one_variant.variant.match(REGEX_EPACTS);
          return {
            variant: one_variant.variant,
            chromosome: match[1],
            position: +match[2],
            ref_allele: match[3],
            ref_allele_freq: 1 - one_variant.altFreq,
            log_pvalue: -Math.log10(one_variant.pvalue)
          };
        }).sort(function (a, b) {
          a = a.variant;
          b = b.variant;

          if (a < b) {
            return -1;
          } else if (a > b) {
            return 1;
          } else {
            // names must be equal
            return 0;
          }
        });
      }
    }]);

    return AssocFromAggregationLZ;
  }(BaseAdapter);
  /**
   * A sample connector that aligns calculated aggregation test data with corresponding gene information. Returns a body
   *   suitable for use with the genes datalayer.
   *
   *  To use this source, one must specify a fields array that calls first the genes source, then a dummy field from
   *      this source. The output will be to transparently add several new fields to the genes data.
   * @public
   */


  var GeneAggregationConnectorLZ = /*#__PURE__*/function (_ConnectorSource) {
    _inherits(GeneAggregationConnectorLZ, _ConnectorSource);

    var _super3 = _createSuper(GeneAggregationConnectorLZ);

    function GeneAggregationConnectorLZ() {
      _classCallCheck(this, GeneAggregationConnectorLZ);

      return _super3.apply(this, arguments);
    }

    _createClass(GeneAggregationConnectorLZ, [{
      key: "_getRequiredSources",
      value: function _getRequiredSources() {
        return ['gene_ns', 'aggregation_ns'];
      }
    }, {
      key: "combineChainBody",
      value: function combineChainBody(data, chain) {
        // The genes layer receives all results, and displays only the best pvalue for each gene
        // Tie the calculated group-test results to genes with a matching name
        var aggregation_source_id = this._source_name_mapping['aggregation_ns'];
        var gene_source_id = this._source_name_mapping['gene_ns']; // This connector assumes that genes are the main body of records from the chain, and that aggregation tests are
        //   a standalone source that has not acted on genes data yet

        var aggregationData = chain.discrete[aggregation_source_id];
        var genesData = chain.discrete[gene_source_id];
        var groupedAggregation = {}; // Group together all tests done on that gene- any mask, any test

        aggregationData.groups.forEach(function (result) {
          if (!Object.prototype.hasOwnProperty.call(groupedAggregation, result.group)) {
            groupedAggregation[result.group] = [];
          }

          groupedAggregation[result.group].push(result.pvalue);
        }); // Annotate any genes that have test results

        genesData.forEach(function (gene) {
          var gene_id = gene.gene_name;
          var tests = groupedAggregation[gene_id];

          if (tests) {
            gene.aggregation_best_pvalue = Math.min.apply(null, tests);
          }
        });
        return genesData;
      }
    }]);

    return GeneAggregationConnectorLZ;
  }(ConnectorSource);

  LocusZoom.Adapters.add('AggregationTestSourceLZ', AggregationTestSource);
  LocusZoom.Adapters.add('AssocFromAggregationLZ', AssocFromAggregationLZ);
  LocusZoom.Adapters.add('GeneAggregationConnectorLZ', GeneAggregationConnectorLZ);
}

if (typeof LocusZoom !== 'undefined') {
  // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()
  // eslint-disable-next-line no-undef
  LocusZoom.use(install);
}

/* harmony default export */ __webpack_exports__["default"] = (install);

/***/ }),

/***/ "raremetal.js":
/*!****************************!*\
  !*** external "raremetal" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = raremetal;

/***/ })

/******/ })["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,