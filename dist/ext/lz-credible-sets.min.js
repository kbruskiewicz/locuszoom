/*! Locuszoom 0.13.0-beta.2 */
var LzCredibleSets =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./esm/ext/lz-credible-sets.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./esm/ext/lz-credible-sets.js":
/*!*************************************!*\
  !*** ./esm/ext/lz-credible-sets.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var gwas_credible_sets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gwas-credible-sets */ "gwas-credible-sets");
/* harmony import */ var gwas_credible_sets__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(gwas_credible_sets__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
    Custom code used to power credible sets demonstration example. This is not part of the core LocusZoom library,
    but can be included as a standalone file.

    The page must incorporate and load all libraries before this file can be used, including:
     - Vendor assets
     - LocusZoom
     - gwas-credible-sets (available via NPM or a related CDN)
 @module
*/


function install(LocusZoom) {
  var BaseAdapter = LocusZoom.Adapters.get('BaseAdapter');
  /**
   * Custom data source that calculates the 95% credible set based on provided data.
   * This source must be requested as the second step in a chain, after a previous step that returns fields required
   *  for the calculation.
   *
   * @param {Object} init.params
   * @param {Object} init.params.fields
   * @param {String} init.params.fields.log_pvalue The name of the field containing -log10 pvalue information
   * @param {Number} [init.params.threshold=0.95] The credible set threshold (eg 95%). Will continue selecting SNPs
   *  until the posterior probabilities add up to at least this fraction of the total.
   * @param {Number} [init.params.significance_threshold=7.301] Do not perform a credible set calculation for this
   *  region unless AT LEAST ONE SNP (as -log10p) exceeds the line of GWAS signficance. Otherwise we are declaring a
   *  credible set when there is no evidence of anything being significant at all. If one snp is significant, it will
   *  create a credible set for the entire region; the resulting set may include things below the line of significance.
   */

  var CredibleSetLZ = /*#__PURE__*/function (_BaseAdapter) {
    _inherits(CredibleSetLZ, _BaseAdapter);

    var _super = _createSuper(CredibleSetLZ);

    function CredibleSetLZ(config) {
      var _this;

      _classCallCheck(this, CredibleSetLZ);

      _this = _super.apply(this, arguments);
      _this.dependentSource = true; // Don't do calcs for a region with no assoc data

      return _this;
    }

    _createClass(CredibleSetLZ, [{
      key: "parseInit",
      value: function parseInit(config) {
        _get(_getPrototypeOf(CredibleSetLZ.prototype), "parseInit", this).apply(this, arguments);

        if (!(this.params.fields && this.params.fields.log_pvalue)) {
          throw new Error("Source config for ".concat(this.constructor.SOURCE_NAME, " must specify how to find 'fields.log_pvalue'"));
        } // Set defaults. Default sig threshold is the line of GWAS significance. (as -log10p)


        this.params = Object.assign({
          threshold: 0.95,
          significance_threshold: 7.301
        }, this.params);
      }
    }, {
      key: "getCacheKey",
      value: function getCacheKey(state, chain, fields) {
        var threshold = state.credible_set_threshold || this.params.threshold;
        return [threshold, state.chr, state.start, state.end].join('_');
      }
    }, {
      key: "fetchRequest",
      value: function fetchRequest(state, chain) {
        if (!chain.body.length) {
          // No credible set can be calculated because there is no association data for this region
          return Promise.resolve([]);
        }

        var self = this; // The threshold can be overridden dynamically via `plot.state`, or set when the source is created

        var threshold = state.credible_set_threshold || this.params.threshold; // Calculate raw bayes factors and posterior probabilities based on information returned from the API

        if (typeof chain.body[0][self.params.fields.log_pvalue] === 'undefined') {
          throw new Error('Credible set source could not locate the required fields from a previous request.');
        }

        var nlogpvals = chain.body.map(function (item) {
          return item[self.params.fields.log_pvalue];
        });

        if (!nlogpvals.some(function (val) {
          return val >= self.params.significance_threshold;
        })) {
          // If NO points have evidence of significance, define the credible set to be empty
          //  (rather than make a credible set that we don't think is meaningful)
          return Promise.resolve([]);
        }

        var credset_data = [];

        try {
          var scores = gwas_credible_sets__WEBPACK_IMPORTED_MODULE_0__["scoring"].bayesFactors(nlogpvals);
          var posteriorProbabilities = gwas_credible_sets__WEBPACK_IMPORTED_MODULE_0__["scoring"].normalizeProbabilities(scores); // Use scores to mark the credible set in various ways (depending on your visualization preferences,
          //   some of these may not be needed)

          var credibleSet = gwas_credible_sets__WEBPACK_IMPORTED_MODULE_0__["marking"].findCredibleSet(posteriorProbabilities, threshold);
          var credSetScaled = gwas_credible_sets__WEBPACK_IMPORTED_MODULE_0__["marking"].rescaleCredibleSet(credibleSet);
          var credSetBool = gwas_credible_sets__WEBPACK_IMPORTED_MODULE_0__["marking"].markBoolean(credibleSet); // Annotate each response record based on credible set membership

          for (var i = 0; i < chain.body.length; i++) {
            credset_data.push({
              posterior_prob: posteriorProbabilities[i],
              contrib_fraction: credSetScaled[i],
              is_member: credSetBool[i]
            });
          }
        } catch (e) {
          // If the calculation cannot be completed, return the data without annotation fields
          console.error(e);
        }

        return Promise.resolve(credset_data);
      }
    }, {
      key: "combineChainBody",
      value: function combineChainBody(data, chain, fields, outnames, trans) {
        // At this point namespacing has been applied; add the calculated fields for this source to the chain
        if (chain.body.length && data.length) {
          var _loop = function _loop(i) {
            var src = data[i];
            var dest = chain.body[i];
            Object.keys(src).forEach(function (attr) {
              dest[attr] = src[attr];
            });
          };

          for (var i = 0; i < data.length; i++) {
            _loop(i);
          }
        }

        return chain.body;
      }
    }]);

    return CredibleSetLZ;
  }(BaseAdapter);

  LocusZoom.Adapters.add('CredibleSetLZ', CredibleSetLZ); // Add related layouts to the central global registry

  LocusZoom.Layouts.add('tooltip', 'association_credible_set', function () {
    // Extend a known tooltip with an extra row of info showing posterior probabilities
    var l = LocusZoom.Layouts.get('tooltip', 'standard_association', {
      unnamespaced: true
    });
    l.html += '{{#if {{namespace[credset]}}posterior_prob}}<br>Posterior probability: <strong>{{{{namespace[credset]}}posterior_prob|scinotation|htmlescape}}</strong>{{/if}}';
    return l;
  }());
  LocusZoom.Layouts.add('tooltip', 'annotation_credible_set', {
    namespace: {
      'assoc': 'assoc',
      'credset': 'credset'
    },
    closable: true,
    show: {
      or: ['highlighted', 'selected']
    },
    hide: {
      and: ['unhighlighted', 'unselected']
    },
    html: '<strong>{{{{namespace[assoc]}}variant|htmlescape}}</strong><br>' + 'P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation|htmlescape}}</strong><br>' + '{{#if {{namespace[credset]}}posterior_prob}}<br>Posterior probability: <strong>{{{{namespace[credset]}}posterior_prob|scinotation|htmlescape}}</strong>{{/if}}'
  });
  LocusZoom.Layouts.add('data_layer', 'association_credible_set', function () {
    var base = LocusZoom.Layouts.get('data_layer', 'association_pvalues', {
      unnamespaced: true,
      id: 'associationcredibleset',
      namespace: {
        'assoc': 'assoc',
        'credset': 'credset',
        'ld': 'ld'
      },
      fill_opacity: 0.7,
      tooltip: LocusZoom.Layouts.get('tooltip', 'association_credible_set', {
        unnamespaced: true
      }),
      fields: ['{{namespace[assoc]}}variant', '{{namespace[assoc]}}position', '{{namespace[assoc]}}log_pvalue', '{{namespace[assoc]}}log_pvalue|logtoscinotation', '{{namespace[assoc]}}ref_allele', '{{namespace[credset]}}posterior_prob', '{{namespace[credset]}}contrib_fraction', '{{namespace[credset]}}is_member', '{{namespace[ld]}}state', '{{namespace[ld]}}isrefvar'],
      match: {
        send: '{{namespace[assoc]}}variant',
        receive: '{{namespace[assoc]}}variant'
      }
    });
    base.color.unshift({
      field: 'lz_highlight_match',
      // Special field name whose presence triggers custom rendering
      scale_function: 'if',
      parameters: {
        field_value: true,
        then: '#FFf000'
      }
    });
    return base;
  }());
  LocusZoom.Layouts.add('data_layer', 'annotation_credible_set', {
    namespace: {
      'assoc': 'assoc',
      'credset': 'credset'
    },
    id: 'annotationcredibleset',
    type: 'annotation_track',
    id_field: '{{namespace[assoc]}}variant',
    x_axis: {
      field: '{{namespace[assoc]}}position'
    },
    color: [{
      field: 'lz_highlight_match',
      // Special field name whose presence triggers custom rendering
      scale_function: 'if',
      parameters: {
        field_value: true,
        then: '#001cee'
      }
    }, '#00CC00'],
    fields: ['{{namespace[assoc]}}variant', '{{namespace[assoc]}}position', '{{namespace[assoc]}}log_pvalue', '{{namespace[credset]}}posterior_prob', '{{namespace[credset]}}contrib_fraction', '{{namespace[credset]}}is_member'],
    match: {
      send: '{{namespace[assoc]}}variant',
      receive: '{{namespace[assoc]}}variant'
    },
    filters: [// Specify which points to show on the track. Any selection must satisfy ALL filters
    {
      field: '{{namespace[credset]}}is_member',
      operator: '=',
      value: true
    }],
    behaviors: {
      onmouseover: [{
        action: 'set',
        status: 'highlighted'
      }],
      onmouseout: [{
        action: 'unset',
        status: 'highlighted'
      }],
      onclick: [{
        action: 'toggle',
        status: 'selected',
        exclusive: true
      }],
      onshiftclick: [{
        action: 'toggle',
        status: 'selected'
      }]
    },
    tooltip: LocusZoom.Layouts.get('tooltip', 'annotation_credible_set', {
      unnamespaced: true
    }),
    tooltip_positioning: 'top'
  });
  LocusZoom.Layouts.add('panel', 'annotation_credible_set', {
    id: 'annotationcredibleset',
    title: {
      text: 'SNPs in 95% credible set',
      x: 50,
      style: {
        'font-size': '14px'
      }
    },
    width: 800,
    height: 45,
    min_height: 45,
    proportional_width: 1,
    margin: {
      top: 25,
      right: 50,
      bottom: 0,
      left: 50
    },
    inner_border: 'rgb(210, 210, 210)',
    toolbar: LocusZoom.Layouts.get('toolbar', 'standard_panel', {
      unnamespaced: true
    }),
    interaction: {
      drag_background_to_pan: true,
      scroll_to_zoom: true,
      x_linked: true
    },
    data_layers: [LocusZoom.Layouts.get('data_layer', 'annotation_credible_set', {
      unnamespaced: true
    })]
  });
  LocusZoom.Layouts.add('panel', 'association_credible_set', function () {
    var l = LocusZoom.Layouts.get('panel', 'association', {
      unnamespaced: true,
      id: 'associationcrediblesets',
      namespace: {
        'assoc': 'assoc',
        'credset': 'credset'
      },
      data_layers: [LocusZoom.Layouts.get('data_layer', 'significance', {
        unnamespaced: true
      }), LocusZoom.Layouts.get('data_layer', 'recomb_rate', {
        unnamespaced: true
      }), LocusZoom.Layouts.get('data_layer', 'association_credible_set', {
        unnamespaced: true
      })]
    }); // Add "display options" button to control how credible set coloring is overlaid on the standard association plot

    l.toolbar.widgets.push({
      type: 'display_options',
      position: 'right',
      color: 'blue',
      // Below: special config specific to this widget
      button_html: 'Display options...',
      button_title: 'Control how plot items are displayed',
      layer_name: 'associationcredibleset',
      default_config_display_name: 'Linkage Disequilibrium (default)',
      // display name for the default plot color option (allow user to revert to plot defaults)
      options: [{
        // First dropdown menu item
        display_name: '95% credible set (boolean)',
        // Human readable representation of field name
        display: {
          // Specify layout directives that control display of the plot for this option
          point_shape: 'circle',
          point_size: 40,
          color: {
            field: '{{namespace[credset]}}is_member',
            scale_function: 'if',
            parameters: {
              field_value: true,
              then: '#00CC00',
              "else": '#CCCCCC'
            }
          },
          legend: [// Tells the legend how to represent this display option
          {
            shape: 'circle',
            color: '#00CC00',
            size: 40,
            label: 'In credible set',
            "class": 'lz-data_layer-scatter'
          }, {
            shape: 'circle',
            color: '#CCCCCC',
            size: 40,
            label: 'Not in credible set',
            "class": 'lz-data_layer-scatter'
          }]
        }
      }, {
        // Second option. The same plot- or even the same field- can be colored in more than one way.
        display_name: '95% credible set (gradient by contribution)',
        display: {
          point_shape: 'circle',
          point_size: 40,
          color: [{
            field: '{{namespace[credset]}}contrib_fraction',
            scale_function: 'if',
            parameters: {
              field_value: 0,
              then: '#777777'
            }
          }, {
            scale_function: 'interpolate',
            field: '{{namespace[credset]}}contrib_fraction',
            parameters: {
              breaks: [0, 1],
              values: ['#fafe87', '#9c0000']
            }
          }],
          legend: [{
            shape: 'circle',
            color: '#777777',
            size: 40,
            label: 'No contribution',
            "class": 'lz-data_layer-scatter'
          }, {
            shape: 'circle',
            color: '#fafe87',
            size: 40,
            label: 'Some contribution',
            "class": 'lz-data_layer-scatter'
          }, {
            shape: 'circle',
            color: '#9c0000',
            size: 40,
            label: 'Most contribution',
            "class": 'lz-data_layer-scatter'
          }]
        }
      }]
    });
    return l;
  }());
  LocusZoom.Layouts.add('plot', 'association_credible_set', {
    state: {},
    width: 800,
    height: 450,
    responsive_resize: true,
    min_region_scale: 20000,
    max_region_scale: 1000000,
    toolbar: LocusZoom.Layouts.get('toolbar', 'standard_association', {
      unnamespaced: true
    }),
    panels: [LocusZoom.Layouts.get('panel', 'association_credible_set', {
      unnamespaced: true
    }), LocusZoom.Layouts.get('panel', 'annotation_credible_set', {
      unnamespaced: true
    }), LocusZoom.Layouts.get('panel', 'genes', {
      unnamespaced: true
    })]
  });
}

if (typeof LocusZoom !== 'undefined') {
  // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()
  // eslint-disable-next-line no-undef
  LocusZoom.use(install);
}

/* harmony default export */ __webpack_exports__["default"] = (install);

/***/ }),

/***/ "gwas-credible-sets":
/*!***********************************!*\
  !*** external "gwasCredibleSets" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = gwasCredibleSets;

/***/ })

/******/ })["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,