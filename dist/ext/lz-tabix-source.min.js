/*! Locuszoom 0.13.0-beta.2 */
var LzTabix =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./esm/ext/lz-tabix-source.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./esm/ext/lz-tabix-source.js":
/*!************************************!*\
  !*** ./esm/ext/lz-tabix-source.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tabix_reader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tabix-reader */ "tabix-reader");
/* harmony import */ var tabix_reader__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tabix_reader__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
A datasource that fetches data from a remote Tabix file, instead of a RESTful API.
Requires a generic user-specified parser.

The page must incorporate and load all libraries before this file can be used, including:
 - Vendor assets
 - LocusZoom
 - tabix-reader (available via NPM or a related CDN)

 @module
*/


function install(LocusZoom) {
  var BaseAdapter = LocusZoom.Adapters.get('BaseAdapter');
  /**
   * Custom data source that loads data from a remote Tabix file (if the file host has been configured with proper
   *  CORS and Range header support- most hosts do not do that by default).
   *
   * @param {Object} init.params
   * @param {Object} init.params.fields
   * @param {String} init.params.fields.log_pvalue The name of the field containing pvalue information
   * @param {Number} [init.params.threshold=0.95] The credible set threshold (eg 95%)
   */

  var TabixUrlSource = /*#__PURE__*/function (_BaseAdapter) {
    _inherits(TabixUrlSource, _BaseAdapter);

    var _super = _createSuper(TabixUrlSource);

    function TabixUrlSource() {
      _classCallCheck(this, TabixUrlSource);

      return _super.apply(this, arguments);
    }

    _createClass(TabixUrlSource, [{
      key: "parseInit",

      /**
       * @param {Object} init
       * @param {function} init.parser_func A function that parses a single line of text and returns (usually) a
       *  structured object of data fields
       * @param {string} init.url_data The URL for the bgzipped and tabix-indexed file
       * @param {string} [init.url_tbi] The URL for the tabix index. Defaults to `url_data` + '.tbi'
       * @param {Object} [init.params]
       * @param {number} [init.params.overfetch = 0] Optionally fetch more data than is required to satisfy the
       *  region query. (specified as a fraction of the region size, 0-1)
       *  Useful for sources where interesting features might lie near the edges of the plot.
       */
      value: function parseInit(init) {
        if (!init.parser_func || !init.url_data) {
          throw new Error('Tabix source is missing required configuration options');
        }

        this.parser = init.parser_func; // TODO: In the future, accept a pre-configured reader instance (as an alternative to the URL). Most useful
        //   for UIs that want to validate the tabix file before adding it to the plot, like LocalZoom.

        this.url_data = init.url_data;
        this.url_tbi = init.url_tbi || "".concat(this.url_data, ".tbi"); // In tabix mode, sometimes we want to fetch a slightly larger region than is displayed, in case a
        //    feature is on the edge of what the tabix query would return.
        //    Specify overfetch in units of % of total region size. ("fetch 10% extra before and after")

        var params = init.params || {};
        this.params = params;
        this._overfetch = params.overfetch || 0;

        if (this._overfetch < 0 || this._overfetch > 1) {
          throw new Error('Overfetch must be specified as a fraction (0-1) of the requested region size');
        } // Assuming that the `tabix-reader` library has been loaded via a CDN, this will create the reader
        // Since fetching the index is a remote operation, all reader usages will be via an async interface.


        this._reader_promise = tabix_reader__WEBPACK_IMPORTED_MODULE_0___default.a.urlReader(this.url_data, this.url_tbi)["catch"](function () {
          throw new Error('Failed to create a tabix reader from the provided URL');
        });
      }
    }, {
      key: "getCacheKey",
      value: function getCacheKey(state
      /*, chain, fields*/
      ) {
        // In generic form, Tabix queries are based on chr, start, and end. The cache is thus controlled by the query,
        //  not the URL
        return [state.chr, state.start, state.end, this._overfetch].join('_');
      }
    }, {
      key: "fetchRequest",
      value: function fetchRequest(state
      /*, chain, fields */
      ) {
        var _this = this;

        return new Promise(function (resolve, reject) {
          // Ensure that the reader is fully created (and index available), then make a query
          var region_start = state.start;
          var region_end = state.end;
          var extra_amount = _this._overfetch * (region_end - region_start);
          var start = state.start - extra_amount;
          var end = state.end + extra_amount;

          _this._reader_promise.then(function (reader) {
            reader.fetch(state.chr, start, end, function (data, err) {
              if (err) {
                reject(new Error('Could not read requested region. This may indicate an error with the .tbi index.'));
              }

              resolve(data);
            });
          });
        });
      }
    }, {
      key: "normalizeResponse",
      value: function normalizeResponse(data) {
        // Parse the data from lines of text to objects
        return data.map(this.parser);
      }
    }]);

    return TabixUrlSource;
  }(BaseAdapter);

  LocusZoom.Adapters.add('TabixUrlSource', TabixUrlSource);
}

if (typeof LocusZoom !== 'undefined') {
  // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()
  // eslint-disable-next-line no-undef
  LocusZoom.use(install);
}

/* harmony default export */ __webpack_exports__["default"] = (install);

/***/ }),

/***/ "tabix-reader":
/*!************************!*\
  !*** external "tabix" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = tabix;

/***/ })

/******/ })["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,